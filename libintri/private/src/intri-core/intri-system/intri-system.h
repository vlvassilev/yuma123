
#ifndef _H_intri_system
#define _H_intri_system
/* 
 * Copyright (c) 2008-2012, Andy Bierman, All Rights Reserved.
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *

*** Generated by yangdump 2.13-0

  Combined SIL header
  module intri-system
  revision 2022-06-14
  namespace intri:intri-system
  organization Intrising Inc.

 */

#include <libxml/xmlstring.h>

#include "dlq.h"
#include "ncxtypes.h"
#include "op.h"
#include "status.h"
#include "val.h"

#ifdef __cplusplus
extern "C" {
#endif

#define y_intri_system_M_intri_system (const xmlChar *)"intri-system"
#define y_intri_system_R_intri_system (const xmlChar *)"2022-06-14"

#define y_intri_system_N_Config_SysContact (const xmlChar *)"Config_SysContact"
#define y_intri_system_N_Config_SysGroup (const xmlChar *)"Config_SysGroup"
#define y_intri_system_N_Config_SysLocation (const xmlChar *)"Config_SysLocation"
#define y_intri_system_N_Config_SysName (const xmlChar *)"Config_SysName"
#define y_intri_system_N_Status_LastBootTime (const xmlChar *)"Status_LastBootTime"
#define y_intri_system_N_Status_Uptime (const xmlChar *)"Status_Uptime"
#define y_intri_system_N_config (const xmlChar *)"config"
#define y_intri_system_N_intri_system (const xmlChar *)"intri-system"
#define y_intri_system_N_status (const xmlChar *)"status"

/* container /intri-system/config */
typedef struct y_intri_system_T_intri_system_config_ {
  xmlChar *Config_SysName;
  xmlChar *Config_SysLocation;
  xmlChar *Config_SysGroup;
  xmlChar *Config_SysContact;
} y_intri_system_T_intri_system_config;

/* container /intri-system/status */
typedef struct y_intri_system_T_intri_system_status_ {
  xmlChar *Status_LastBootTime;
  int64 Status_Uptime;
} y_intri_system_T_intri_system_status;

/* container /intri-system */
typedef struct y_intri_system_T_intri_system_ {
  y_intri_system_T_intri_system_config config;
  y_intri_system_T_intri_system_status status;
} y_intri_system_T_intri_system;
/********************************************************************
* FUNCTION y_intri_system_init
* 
* initialize the intri-system server instrumentation library
* 
* INPUTS:
*    modname == requested module name
*    revision == requested version (NULL for any)
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t y_intri_system_init (
  const xmlChar *modname,
  const xmlChar *revision);

/********************************************************************
* FUNCTION y_intri_system_init2
* 
* SIL init phase 2: non-config data structures
* Called after running config is loaded
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t y_intri_system_init2 (void);

/********************************************************************
* FUNCTION y_intri_system_cleanup
*    cleanup the server instrumentation library
* 
********************************************************************/
extern void y_intri_system_cleanup (void);

#ifdef __cplusplus
} /* end extern 'C' */
#endif

#endif