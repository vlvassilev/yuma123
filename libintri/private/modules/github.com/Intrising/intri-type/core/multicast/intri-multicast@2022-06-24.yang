module intri-multicast {

  namespace "intri:intri-multicast";
  prefix "intri-multicast";
  organization "
    Intrising Inc.";
  contact "
    intrising@intrising.com.tw";
  revision 2022-06-24 {
    description "Build date.";
  }

  import intri-device {
    prefix intri-device;
  }
  import intri-empty {
    prefix intri-empty;
  }
  import intri-common {
    prefix intri-common;
  }
  typedef RouterDetectionTypeOptions {
    type enumeration {
      enum ROUTER_DETECTION_TYPE_QUERY_MESSAGE {
        description "[Query Message]";
        value 0;
      }
    }
  }
  typedef ProtocolTypeOptions {
    type enumeration {
      enum PROTOCOL_TYPE_NONE {
        description "[NONE]";
        value 0;
      }
      enum PROTOCOL_TYPE_IGMP {
        description "[IGMP]";
        value 1;
      }
      enum PROTOCOL_TYPE_MLD {
        description "[MLD]";
        value 2;
      }
      enum PROTOCOL_TYPE_BOTH {
        description "[BOTH]";
        value 3;
      }
    }
  }
  typedef RouterStatusTypeOptions {
    type enumeration {
      enum ROUTER_STATUS_TYPE_DISABLED {
        description "[Disabled]";
        value 0;
      }
      enum ROUTER_STATUS_TYPE_DYNAMIC {
        description "[Dynamic]";
        value 1;
      }
      enum ROUTER_STATUS_TYPE_STATIC {
        description "[Static]";
        value 2;
      }
      enum ROUTER_STATUS_TYPE_BOTH {
        description "[Both]";
        value 3;
      }
    }
  }
  typedef VersionTypeOptions {
    type enumeration {
      enum VERSION_TYPE_IGMP_V1 {
        description "[IGMP V1]";
        value 0;
      }
      enum VERSION_TYPE_IGMP_V2 {
        description "[IGMP V2]";
        value 1;
      }
      enum VERSION_TYPE_IGMP_V3 {
        description "[IGMP V3]";
        value 2;
      }
      enum VERSION_TYPE_MLD_V1 {
        description "[MLD V1]";
        value 3;
      }
      enum VERSION_TYPE_MLD_V2 {
        description "[MLD V2]";
        value 4;
      }
      enum VERSION_TYPE_DISABLED {
        description "[Disabled]";
        value 5;
      }
    }
  }
  typedef StaticTypeOptions {
    type enumeration {
      enum STATIC_TYPE_L2 {
        description "[L2]";
        value 0;
      }
      enum STATIC_TYPE_L3 {
        description "[L3]";
        value 1;
      }
    }
  }
  grouping Config {
    leaf IGMPSnoopingGlobalEnabled {
      type boolean;
    }
    leaf MLDSnoopingGlobalEnabled {
      type boolean;
    }
    container IGMPConfig {
      uses Snooping;
    }
    container MLDConfig {
      uses Snooping;
    }
    container RouterConfig {
      uses RouterPort;
    }
    container UnregisterConfig {
      uses UnregisterFlood;
    }
    container StaticGroups {
      uses Static;
    }
  }
  grouping Snooping {
    container VlanList {
      list VlanList_Entry {
        uses SnoopingConfigEntry;
      }
    }
  }
  grouping SnoopingConfigEntry {
    leaf VlanID {
      type int32;
    }
    leaf SnoopingEnabled {
      type boolean;
    }
    leaf QuerierVersion {
      type VersionTypeOptions;
    }
    leaf MulticastRouterDetection {
      type RouterDetectionTypeOptions;
    }
    leaf EnableFastLeave {
      type boolean;
    }
    leaf EnableReportSuppression {
      type boolean;
    }
    leaf GroupLimit {
      type int32;
    }
    leaf GroupMembershipInterval {
      type int32;
    }
    leaf LastMemberQueryTime {
      type int32;
    }
    leaf MaxResponseTime {
      type int32;
    }
    leaf RouterAgingTime {
      type int32;
    }
    leaf StartQueryCount {
      type int32;
    }
    leaf StartQueryInterval {
      type int32;
    }
    leaf QueryInterval {
      type int32;
    }
    leaf Robustness {
      type int32;
    }
    container IdentifyiesConfig {
      list IdentifyiesConfig_Entry {
        uses PortEnabledEntry;
      }
    }
  }
  grouping UnregisterFlood {
    container VlanList {
      list VlanList_Entry {
        uses UnregisterFloodVlan;
      }
    }
  }
  grouping UnregisterFloodVlan {
    leaf VlanID {
      type int32;
    }
    leaf Enabled {
      type boolean;
    }
  }
  grouping RouterPort {
    container VlanList {
      list VlanList_Entry {
        uses RouterPortVlanEntry;
      }
    }
  }
  grouping RouterPortVlanEntry {
    leaf VlanID {
      type int32;
    }
    container PortList {
      list PortList_Entry {
        uses PortEnabledEntry;
      }
    }
  }
  grouping PortEnabledEntry {
    container IdentifyNo {
      uses intri-device:InterfaceIdentify;
    }
    leaf Enabled {
      type boolean;
    }
  }
  grouping Static {
    container List {
      list List_Entry {
        uses StaticGroupsConfigEntry;
      }
    }
  }
  grouping StaticGroupsConfigEntry {
    leaf VlanID {
      type int32;
    }
    leaf Name {
      type string;
    }
    leaf MulticastAddress {
      type string;
    }
    container ForwardingPort {
      uses intri-device:PortList;
    }
  }
  grouping IGMPStatistics {
    container List {
      list List_Entry {
        uses IGMPStatisticEntry;
      }
    }
  }
  grouping IGMPStatisticEntry {
    leaf VlanID {
      type int32;
    }
    leaf RxGeneralQueries {
      type int32;
    }
    leaf RxV3Reports {
      type int32;
    }
    leaf RxV2Reports {
      type int32;
    }
    leaf RxV2Leaves {
      type int32;
    }
    leaf RxV1Reports {
      type int32;
    }
    leaf Querier {
      type boolean;
    }
  }
  grouping RouterStatus {
    container VlanList {
      list VlanList_Entry {
        uses RouterStatusEntry;
      }
    }
  }
  grouping RouterStatusEntry {
    leaf VlanID {
      type int32;
    }
    container List {
      list List_Entry {
        uses RouterPortStatusEntry;
      }
    }
  }
  grouping RouterPortStatusEntry {
    leaf Type {
      type ProtocolTypeOptions;
    }
    leaf Status {
      type RouterStatusTypeOptions;
    }
    container IdentifyNo {
      uses intri-device:InterfaceIdentify;
    }
  }
  grouping DynamicGroups {
    container List {
      list List_Entry {
        uses DynamicGroupEntry;
      }
    }
  }
  grouping DynamicGroupEntry {
    leaf VlanID {
      type int32;
    }
    leaf Address {
      type string;
    }
    leaf TTL {
      type int32;
    }
    container IdentifyList {
      list IdentifyList_Entry {
        uses intri-device:InterfaceIdentify;
      }
    }
  }
  grouping MLDStatistics {
    container List {
      list List_Entry {
        uses MLDStatisticEntry;
      }
    }
  }
  grouping MLDStatisticEntry {
    leaf VlanID {
      type int32;
    }
    leaf RxGeneralQueries {
      type int32;
    }
    leaf RxV2Reports {
      type int32;
    }
    leaf RxV1Reports {
      type int32;
    }
    leaf RxV1Leaves {
      type int32;
    }
    leaf Querier {
      type boolean;
    }
  }
  grouping VlanList {
    container List {
      leaf-list List_Entry {
        type int32;
      }
    }
  }
  rpc intri-multicast-Multicast-GetConfig {
    output {
      uses Config;
    }
  }
  rpc intri-multicast-Multicast-SetIGMPSnoopingEnabled {
    input {
      uses intri-common:Enabled;
    }
  }
  rpc intri-multicast-Multicast-SetMLDSnoopingEnabled {
    input {
      uses intri-common:Enabled;
    }
  }
  rpc intri-multicast-Multicast-GetIGMPSnoopingConfig {
    input {
      uses VlanList;
    }
    output {
      uses Snooping;
    }
  }
  rpc intri-multicast-Multicast-SetIGMPSnoopingConfig {
    input {
      uses Snooping;
    }
  }
  rpc intri-multicast-Multicast-GetMLDSnoopingConfig {
    input {
      uses VlanList;
    }
    output {
      uses Snooping;
    }
  }
  rpc intri-multicast-Multicast-SetMLDSnoopingConfig {
    input {
      uses Snooping;
    }
  }
  rpc intri-multicast-Multicast-GetStaticGroupConfig {
    input {
      uses VlanList;
    }
    output {
      uses Static;
    }
  }
  rpc intri-multicast-Multicast-UpdateStaticGroupConfig {
    input {
      uses Static;
    }
  }
  rpc intri-multicast-Multicast-AddStaticGroupConfig {
    input {
      uses Static;
    }
  }
  rpc intri-multicast-Multicast-DeleteStaticGroupConfig {
    input {
      uses Static;
    }
  }
  rpc intri-multicast-Multicast-GetUnregisterFloodingConfig {
    input {
      uses VlanList;
    }
    output {
      uses UnregisterFlood;
    }
  }
  rpc intri-multicast-Multicast-SetUnregisterFloodingConfig {
    input {
      uses UnregisterFlood;
    }
  }
  rpc intri-multicast-Multicast-GetRouterPortStatus {
    input {
      uses VlanList;
    }
    output {
      uses RouterStatus;
    }
  }
  rpc intri-multicast-Multicast-SetRouterPortConfig {
    input {
      uses RouterPort;
    }
  }
  rpc intri-multicast-Multicast-GetRouterPortConfig {
    input {
      uses VlanList;
    }
    output {
      uses RouterPort;
    }
  }
  rpc intri-multicast-Multicast-GetIGMPGroups {
    input {
      uses VlanList;
    }
    output {
      uses DynamicGroups;
    }
  }
  rpc intri-multicast-Multicast-GetMLDGroups {
    input {
      uses VlanList;
    }
    output {
      uses DynamicGroups;
    }
  }
  rpc intri-multicast-Multicast-GetIGMPStatistics {
    input {
      uses VlanList;
    }
    output {
      uses IGMPStatistics;
    }
  }
  rpc intri-multicast-Multicast-GetMLDStatistics {
    input {
      uses VlanList;
    }
    output {
      uses MLDStatistics;
    }
  }
}
