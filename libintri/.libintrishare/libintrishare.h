/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package command-line-arguments */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h> /* for ptrdiff_t below */

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */




/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef __SIZE_TYPE__ GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern void Cli_CLI_SetConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Cli_CLI_RunScript(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_RunImportConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_RunExportConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_GetSaveModeStatus(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_RunSaveRunningConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_RunRestoreDefaultConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_RunCopyRunningConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_RunCopyDefaultConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_GetRunningConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_GetDefaultConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_GetSavedConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_GetRunningAclConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_SetRunningAclConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_SetDefaultAclConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_GetRunningVlanConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_SetRunningVlanConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_SetDefaultVlanConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_GetRunningGvrpConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_SetRunningGvrpConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_SetDefaultGvrpConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_GetRunningAccessConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_SetRunningAccessConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_SetDefaultAccessConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_GetRunningUserInterfaceConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_SetRunningUserInterfaceConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_SetDefaultUserInterfaceConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_GetRunningSystemConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_SetRunningSystemConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_SetDefaultSystemConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_GetRunningNetworkConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_SetRunningNetworkConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_SetDefaultNetworkConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_GetRunningTimeConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_SetRunningTimeConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_SetDefaultTimeConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_GetRunningPortConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_SetRunningPortConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_SetDefaultPortConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_GetRunningSFPConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_SetRunningSFPConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_SetDefaultSFPConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_GetRunningMirroringConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_SetRunningMirroringConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_SetDefaultMirroringConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_GetRunningIsolationConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_SetRunningIsolationConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_SetDefaultIsolationConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_GetRunningFDBConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_SetRunningFDBConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_SetDefaultFDBConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_GetRunningPortSecurityConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_SetRunningPortSecurityConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_SetDefaultPortSecurityConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_GetRunningFilesConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_SetRunningFilesConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_SetDefaultFilesConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_GetRunningLACPConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_SetRunningLACPConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_SetDefaultLACPConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_GetRunningMulticastConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_SetRunningMulticastConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_SetDefaultMulticastConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_GetRunningStormControlConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_SetRunningStormControlConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_SetDefaultStormControlConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_GetRunningDHCPConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_SetRunningDHCPConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_SetDefaultDHCPConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_GetRunningQoSConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_SetRunningQoSConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_SetDefaultQoSConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_GetRunningLoopConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_SetRunningLoopConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_SetDefaultLoopConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_GetRunningLLDPConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_SetRunningLLDPConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_SetDefaultLLDPConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_GetRunningPoeConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_SetRunningPoeConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_SetDefaultPoeConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_GetRunningCDPConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_SetDefaultCDPConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_SetRunningCDPConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_GetRunningDHCPServerConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_SetRunningDHCPServerConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_SetDefaultDHCPServerConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_GetRunningSTPConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_SetRunningSTPConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_SetDefaultSTPConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_GetRunningMSTPConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_SetRunningMSTPConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_SetDefaultMSTPConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_GetRunningTimeRangeConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_SetDefaultTimeRangeConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_SetRunningTimeRangeConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_GetRunningArpInspectionConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_SetDefaultArpInspectionConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_SetRunningArpInspectionConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_GetRunningPTPConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_SetDefaultPTPConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_SetRunningPTPConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_GetRunningMonitorConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_SetDefaultMonitorConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_SetRunningMonitorConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_GetRunningTimeSyncConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_SetRunningTimeSyncConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_SetDefaultTimeSyncConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_GetRunningUdldConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_SetRunningUdldConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_SetDefaultUdldConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_GetRunningPortAuthenticationConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_SetRunningPortAuthenticationConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_SetDefaultPortAuthenticationConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_GetRunningLogConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_SetDefaultLogConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Config_Config_SetRunningLogConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Access_Access_GetConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Access_Access_GetAuthenticationConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Access_Access_SetAuthenticationConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Access_Access_Login(GoString* param0, GoString* param1, GoInt* param2);
extern void Access_Access_Logout(GoString* param0, GoString* param1, GoInt* param2);
extern void Access_Access_PAMLogin(GoString* param0, GoString* param1, GoInt* param2);
extern void Access_Access_GetUsers(GoString* param0, GoString* param1, GoInt* param2);
extern void Access_Access_AddUser(GoString* param0, GoString* param1, GoInt* param2);
extern void Access_Access_DeleteUser(GoString* param0, GoString* param1, GoInt* param2);
extern void Access_Access_UpdateUser(GoString* param0, GoString* param1, GoInt* param2);
extern void Access_Access_RunEncryptPassword(GoString* param0, GoString* param1, GoInt* param2);
extern void Access_Access_RunUserEnterPassword(GoString* param0, GoString* param1, GoInt* param2);
extern void Access_Access_RunUserEnterSNMPV3AuthPassword(GoString* param0, GoString* param1, GoInt* param2);
extern void Access_Access_RunUserEnterSNMPV3PrivacyPassword(GoString* param0, GoString* param1, GoInt* param2);
extern void Access_Access_GetGroups(GoString* param0, GoString* param1, GoInt* param2);
extern void Access_Access_AddGroup(GoString* param0, GoString* param1, GoInt* param2);
extern void Access_Access_DeleteGroup(GoString* param0, GoString* param1, GoInt* param2);
extern void Access_Access_UpdateGroup(GoString* param0, GoString* param1, GoInt* param2);
extern void Access_Access_GetAuthenticatorServerConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Access_Access_AddAuthenticatorServerConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Access_Access_DeleteAuthenticatorServerConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Access_Access_UpdateAuthenticatorServerConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Access_Access_GetRestrictions(GoString* param0, GoString* param1, GoInt* param2);
extern void Access_Access_AddRestriction(GoString* param0, GoString* param1, GoInt* param2);
extern void Access_Access_DeleteRestriction(GoString* param0, GoString* param1, GoInt* param2);
extern void Access_Access_UpdateRestriction(GoString* param0, GoString* param1, GoInt* param2);
extern void Acl_ACL_GetConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Acl_ACL_GetInterfaceList(GoString* param0, GoString* param1, GoInt* param2);
extern void Acl_ACL_UpdateInterface(GoString* param0, GoString* param1, GoInt* param2);
extern void Acl_ACL_UpdateInterfaceList(GoString* param0, GoString* param1, GoInt* param2);
extern void Acl_ACL_GetACLList(GoString* param0, GoString* param1, GoInt* param2);
extern void Acl_ACL_AddACL(GoString* param0, GoString* param1, GoInt* param2);
extern void Acl_ACL_DeleteACL(GoString* param0, GoString* param1, GoInt* param2);
extern void Acl_ACL_UpdateACL(GoString* param0, GoString* param1, GoInt* param2);
extern void Acl_ACL_GetACEList(GoString* param0, GoString* param1, GoInt* param2);
extern void Acl_ACL_AddACE(GoString* param0, GoString* param1, GoInt* param2);
extern void Acl_ACL_DeleteACE(GoString* param0, GoString* param1, GoInt* param2);
extern void Acl_ACL_UpdateACE(GoString* param0, GoString* param1, GoInt* param2);
extern void Acl_ACL_GetBindingList(GoString* param0, GoString* param1, GoInt* param2);
extern void Acl_ACL_AddBinding(GoString* param0, GoString* param1, GoInt* param2);
extern void Acl_ACL_DeleteBinding(GoString* param0, GoString* param1, GoInt* param2);
extern void Acl_ACL_UpdateBinding(GoString* param0, GoString* param1, GoInt* param2);
extern void Acl_ACL_GetFlowMirroringList(GoString* param0, GoString* param1, GoInt* param2);
extern void Acl_ACL_AddFlowMirroring(GoString* param0, GoString* param1, GoInt* param2);
extern void Acl_ACL_DeleteFlowMirroring(GoString* param0, GoString* param1, GoInt* param2);
extern void Acl_ACL_UpdateFlowMirroring(GoString* param0, GoString* param1, GoInt* param2);
extern void Cdp_CDP_GetConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Cdp_CDP_SetConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Cdp_CDP_GetLocalInfo(GoString* param0, GoString* param1, GoInt* param2);
extern void Cdp_CDP_GetNeighborInfo(GoString* param0, GoString* param1, GoInt* param2);
extern void Cdp_CDP_GetStatistic(GoString* param0, GoString* param1, GoInt* param2);
extern void Cdp_CDP_RunClearStatistic(GoString* param0, GoString* param1, GoInt* param2);
extern void Dhcp_ARPInspection_GetConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Dhcp_ARPInspection_SetConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Dhcp_DHCP_GetRelayConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Dhcp_DHCP_GetSnoopingConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Dhcp_DHCP_SetRelayConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Dhcp_DHCP_SetSnoopingConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Dhcp_DHCP_RunUnblockPort(GoString* param0, GoString* param1, GoInt* param2);
extern void Dhcp_DHCP_GetSnoopingStatistic(GoString* param0, GoString* param1, GoInt* param2);
extern void Dhcp_DHCP_GetSnoopingBindingDatabase(GoString* param0, GoString* param1, GoInt* param2);
extern void Dhcp_DHCP_ClearSnoopingStatistic(GoString* param0, GoString* param1, GoInt* param2);
extern void Dhcp_DHCP_ClearSnoopingBindingDatabase(GoString* param0, GoString* param1, GoInt* param2);
extern void Dhcpserver_DHCPServer_GetV4Config(GoString* param0, GoString* param1, GoInt* param2);
extern void Dhcpserver_DHCPServer_SetV4System(GoString* param0, GoString* param1, GoInt* param2);
extern void Dhcpserver_DHCPServer_AddV4Basic(GoString* param0, GoString* param1, GoInt* param2);
extern void Dhcpserver_DHCPServer_UpdateV4Basic(GoString* param0, GoString* param1, GoInt* param2);
extern void Dhcpserver_DHCPServer_DeleteV4Basic(GoString* param0, GoString* param1, GoInt* param2);
extern void Dhcpserver_DHCPServer_GetV4Status(GoString* param0, GoString* param1, GoInt* param2);
extern void Dhcpserver_DHCPServer_GetV4MACBased(GoString* param0, GoString* param1, GoInt* param2);
extern void Dhcpserver_DHCPServer_AddV4MACBased(GoString* param0, GoString* param1, GoInt* param2);
extern void Dhcpserver_DHCPServer_DeleteV4MACBased(GoString* param0, GoString* param1, GoInt* param2);
extern void Dhcpserver_DHCPServer_UpdateV4MACBased(GoString* param0, GoString* param1, GoInt* param2);
extern void Dhcpserver_DHCPServer_GetV4PortBased(GoString* param0, GoString* param1, GoInt* param2);
extern void Dhcpserver_DHCPServer_UpdateV4PortBased(GoString* param0, GoString* param1, GoInt* param2);
extern void Diagnostic_Diagnostic_RunPingTest(GoString* param0, GoString* param1, GoInt* param2);
extern void Diagnostic_Diagnostic_RunTraceRoute(GoString* param0, GoString* param1, GoInt* param2);
extern void Diagnostic_Diagnostic_RunDNSLookup(GoString* param0, GoString* param1, GoInt* param2);
extern void Diagnostic_Diagnostic_GetARPTable(GoString* param0, GoString* param1, GoInt* param2);
extern void Fdb_FDB_GetConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Fdb_FDB_GetMACAgingTime(GoString* param0, GoString* param1, GoInt* param2);
extern void Fdb_FDB_SetMACAgingTime(GoString* param0, GoString* param1, GoInt* param2);
extern void Fdb_FDB_GetFDBForwardTable(GoString* param0, GoString* param1, GoInt* param2);
extern void Fdb_FDB_AddForwardMACAddress(GoString* param0, GoString* param1, GoInt* param2);
extern void Fdb_FDB_DeleteForwardMACAddress(GoString* param0, GoString* param1, GoInt* param2);
extern void Fdb_FDB_UpdateForwardMACAddress(GoString* param0, GoString* param1, GoInt* param2);
extern void Fdb_FDB_GetFDBDropTable(GoString* param0, GoString* param1, GoInt* param2);
extern void Fdb_FDB_AddDropMACAddress(GoString* param0, GoString* param1, GoInt* param2);
extern void Fdb_FDB_DeleteDropMACAddress(GoString* param0, GoString* param1, GoInt* param2);
extern void Fdb_FDB_UpdateDropMACAddress(GoString* param0, GoString* param1, GoInt* param2);
extern void Fdb_FDB_UpdatePortLearningLimit(GoString* param0, GoString* param1, GoInt* param2);
extern void Fdb_FDB_GetInfo(GoString* param0, GoString* param1, GoInt* param2);
extern void Fdb_FDB_GetTable(GoString* param0, GoString* param1, GoInt* param2);
extern void Fdb_FDB_GetAuthorizedTable(GoString* param0, GoString* param1, GoInt* param2);
extern void Fdb_FDB_GetSecurityTable(GoString* param0, GoString* param1, GoInt* param2);
extern void Fdb_FDB_GetSpecificTable(GoString* param0, GoString* param1, GoInt* param2);
extern void Fdb_FDB_RunClearMACTable(GoString* param0, GoString* param1, GoInt* param2);
extern void Fdb_FDB_RunClearMACTableForInterface(GoString* param0, GoString* param1, GoInt* param2);
extern void Fdb_FDB_AddEntry(GoString* param0, GoString* param1, GoInt* param2);
extern void Fdb_FDB_DeleteEntry(GoString* param0, GoString* param1, GoInt* param2);
extern void Fdb_FDB_UpdateEntry(GoString* param0, GoString* param1, GoInt* param2);
extern void Fdb_FDB_UpdatePortOccupied(GoString* param0, GoString* param1, GoInt* param2);
extern void Fdb_FDB_AddMulticastEntry(GoString* param0, GoString* param1, GoInt* param2);
extern void Fdb_FDB_DeleteMulticastEntry(GoString* param0, GoString* param1, GoInt* param2);
extern void Fdb_FDB_UpdateMulticastEntry(GoString* param0, GoString* param1, GoInt* param2);
extern void Files_Files_GetConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Files_Files_GetFTPServerEnabled(GoString* param0, GoString* param1, GoInt* param2);
extern void Files_Files_SetFTPServerEnabled(GoString* param0, GoString* param1, GoInt* param2);
extern void Files_Files_GetActivateCertificate(GoString* param0, GoString* param1, GoInt* param2);
extern void Files_Files_SetActivateCertificateForWeb(GoString* param0, GoString* param1, GoInt* param2);
extern void Files_Files_SetActivateCertificateForSNMP(GoString* param0, GoString* param1, GoInt* param2);
extern void Files_Files_AddActivateCertificateForSNMPManager(GoString* param0, GoString* param1, GoInt* param2);
extern void Files_Files_DeleteActivateCertificateForSNMPManager(GoString* param0, GoString* param1, GoInt* param2);
extern void Files_Files_UpdateActivateCertificateForSNMPManager(GoString* param0, GoString* param1, GoInt* param2);
extern void Files_Files_RunImportCertificate(GoString* param0, GoString* param1, GoInt* param2);
extern void Files_Files_RunExportCertificate(GoString* param0, GoString* param1, GoInt* param2);
extern void Files_Files_RunRemoveCertificate(GoString* param0, GoString* param1, GoInt* param2);
extern void Files_Files_GetCertificateList(GoString* param0, GoString* param1, GoInt* param2);
extern void Files_Files_GetActivateCertificateInfo(GoString* param0, GoString* param1, GoInt* param2);
extern void Gvrp_GVRP_GetConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Gvrp_GVRP_SetGVRPEnabled(GoString* param0, GoString* param1, GoInt* param2);
extern void Gvrp_GVRP_GetGVRPEnabled(GoString* param0, GoString* param1, GoInt* param2);
extern void Gvrp_GVRP_GetPortsConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Gvrp_GVRP_UpdatePortsConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Gvrp_GVRP_UpdatePortConfigEntry(GoString* param0, GoString* param1, GoInt* param2);
extern void Isolation_Isolation_GetConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Isolation_Isolation_SetAllowOutgoingConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Lacp_LACP_GetConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Lacp_LACP_SetSystem(GoString* param0, GoString* param1, GoInt* param2);
extern void Lacp_LACP_GetSystem(GoString* param0, GoString* param1, GoInt* param2);
extern void Lacp_LACP_SetTrunk(GoString* param0, GoString* param1, GoInt* param2);
extern void Lacp_LACP_GetTrunk(GoString* param0, GoString* param1, GoInt* param2);
extern void Lacp_LACP_GetPortStatus(GoString* param0, GoString* param1, GoInt* param2);
extern void Lldp_LLDP_GetConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Lldp_LLDP_SetConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Lldp_LLDP_SetSystem(GoString* param0, GoString* param1, GoInt* param2);
extern void Lldp_LLDP_GetSystem(GoString* param0, GoString* param1, GoInt* param2);
extern void Lldp_LLDP_SetPortConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Lldp_LLDP_GetPortConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Lldp_LLDP_GetLocalInfo(GoString* param0, GoString* param1, GoInt* param2);
extern void Lldp_LLDP_GetNeighborInfo(GoString* param0, GoString* param1, GoInt* param2);
extern void Lldp_LLDP_GetStatistic(GoString* param0, GoString* param1, GoInt* param2);
extern void Lldp_LLDP_RunClearStatistic(GoString* param0, GoString* param1, GoInt* param2);
extern void Loop_Loop_GetStatus(GoString* param0, GoString* param1, GoInt* param2);
extern void Loop_Loop_GetConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Loop_Loop_GetPortConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Loop_Loop_UpdatePortConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Maintenance_Maintenance_RunRebootDevice(GoString* param0, GoString* param1, GoInt* param2);
extern void Maintenance_Maintenance_RunCreateSnapshot(GoString* param0, GoString* param1, GoInt* param2);
extern void Maintenance_Maintenance_GetCurrentFirmware(GoString* param0, GoString* param1, GoInt* param2);
extern void Maintenance_Maintenance_GetPreviousFirmware(GoString* param0, GoString* param1, GoInt* param2);
extern void Maintenance_Maintenance_RunGotoPreviousFirmware(GoString* param0, GoString* param1, GoInt* param2);
extern void Maintenance_Maintenance_RunUpgradeFirmware(GoString* param0, GoString* param1, GoInt* param2);
extern void Mirroring_Mirroring_GetConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Mirroring_Mirroring_GetRSPAN(GoString* param0, GoString* param1, GoInt* param2);
extern void Mirroring_Mirroring_SetRSPAN(GoString* param0, GoString* param1, GoInt* param2);
extern void Mirroring_Mirroring_GetDestinationList(GoString* param0, GoString* param1, GoInt* param2);
extern void Mirroring_Mirroring_AddDestination(GoString* param0, GoString* param1, GoInt* param2);
extern void Mirroring_Mirroring_DeleteDestination(GoString* param0, GoString* param1, GoInt* param2);
extern void Mirroring_Mirroring_UpdateDestination(GoString* param0, GoString* param1, GoInt* param2);
extern void Mirroring_Mirroring_GetSourceList(GoString* param0, GoString* param1, GoInt* param2);
extern void Mirroring_Mirroring_AddSource(GoString* param0, GoString* param1, GoInt* param2);
extern void Mirroring_Mirroring_DeleteSource(GoString* param0, GoString* param1, GoInt* param2);
extern void Mirroring_Mirroring_UpdateSource(GoString* param0, GoString* param1, GoInt* param2);
extern void Monitor_Monitor_GetConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Monitor_Monitor_GetDeviceLimitConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Monitor_Monitor_UpdateDeviceScorllBarValueEntry(GoString* param0, GoString* param1, GoInt* param2);
extern void Monitor_Monitor_UpdateDeviceScorllBarValue(GoString* param0, GoString* param1, GoInt* param2);
extern void Monitor_Monitor_GetSystemLimitConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Monitor_Monitor_UpdateSystemScorllBarValueEntry(GoString* param0, GoString* param1, GoInt* param2);
extern void Monitor_Monitor_UpdateSystemScorllBarValue(GoString* param0, GoString* param1, GoInt* param2);
extern void Monitor_Monitor_GetStatus(GoString* param0, GoString* param1, GoInt* param2);
extern void Monitor_Monitor_GetDeviceStatus(GoString* param0, GoString* param1, GoInt* param2);
extern void Monitor_Monitor_GetSystemStatus(GoString* param0, GoString* param1, GoInt* param2);
extern void Monitor_Monitor_GetLEDStatus(GoString* param0, GoString* param1, GoInt* param2);
extern void Multicast_Multicast_GetConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Multicast_Multicast_SetIGMPSnoopingEnabled(GoString* param0, GoString* param1, GoInt* param2);
extern void Multicast_Multicast_SetMLDSnoopingEnabled(GoString* param0, GoString* param1, GoInt* param2);
extern void Multicast_Multicast_GetIGMPSnoopingConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Multicast_Multicast_SetIGMPSnoopingConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Multicast_Multicast_GetMLDSnoopingConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Multicast_Multicast_SetMLDSnoopingConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Multicast_Multicast_GetStaticGroupConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Multicast_Multicast_UpdateStaticGroupConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Multicast_Multicast_AddStaticGroupConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Multicast_Multicast_DeleteStaticGroupConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Multicast_Multicast_GetUnregisterFloodingConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Multicast_Multicast_SetUnregisterFloodingConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Multicast_Multicast_GetRouterPortStatus(GoString* param0, GoString* param1, GoInt* param2);
extern void Multicast_Multicast_SetRouterPortConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Multicast_Multicast_GetRouterPortConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Multicast_Multicast_GetIGMPGroups(GoString* param0, GoString* param1, GoInt* param2);
extern void Multicast_Multicast_GetMLDGroups(GoString* param0, GoString* param1, GoInt* param2);
extern void Multicast_Multicast_GetIGMPStatistics(GoString* param0, GoString* param1, GoInt* param2);
extern void Multicast_Multicast_GetMLDStatistics(GoString* param0, GoString* param1, GoInt* param2);
extern void Network_Network_GetConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Network_Network_GetBasicConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Network_Network_SetBasicConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Network_Network_GetIPConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Network_Network_GetIPv4Config(GoString* param0, GoString* param1, GoInt* param2);
extern void Network_Network_SetIPv4Config(GoString* param0, GoString* param1, GoInt* param2);
extern void Network_Network_GetIPv6Config(GoString* param0, GoString* param1, GoInt* param2);
extern void Network_Network_SetIPv6Config(GoString* param0, GoString* param1, GoInt* param2);
extern void Network_Network_GetV4Status(GoString* param0, GoString* param1, GoInt* param2);
extern void Network_Network_GetV6Status(GoString* param0, GoString* param1, GoInt* param2);
extern void Network_Network_GetIPv6Address(GoString* param0, GoString* param1, GoInt* param2);
extern void Network_Network_GetIPv4Address(GoString* param0, GoString* param1, GoInt* param2);
extern void Poe_PoE_GetConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Poe_PoE_UpdatePortConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Poe_PoE_RunRestartPoEPort(GoString* param0, GoString* param1, GoInt* param2);
extern void Poe_PoE_SetPoEMaxPowerAvailable(GoString* param0, GoString* param1, GoInt* param2);
extern void Poe_PoE_GetPortStatus(GoString* param0, GoString* param1, GoInt* param2);
extern void Poe_PoE_GetSystemStatus(GoString* param0, GoString* param1, GoInt* param2);
extern void Port_Port_GetConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Port_Port_UpdateAliasConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Port_Port_UpdateOperationConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Port_Port_UpdateSpeedDuplexConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Port_Port_UpdateFlowControlConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Port_Port_UpdateEnergyEfficiencyConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Port_Port_GetStatus(GoString* param0, GoString* param1, GoInt* param2);
extern void Port_Port_RunRestartPorts(GoString* param0, GoString* param1, GoInt* param2);
extern void Port_Port_GetLgStatus(GoString* param0, GoString* param1, GoInt* param2);
extern void Port_Port_RunEnablePort(GoString* param0, GoString* param1, GoInt* param2);
extern void Port_Port_GetPortStatus(GoString* param0, GoString* param1, GoInt* param2);
extern void Port_Port_GetLgPortStatus(GoString* param0, GoString* param1, GoInt* param2);
extern void Portauthentication_PortAuthentication_GetConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Portauthentication_PortAuthentication_GetSystemConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Portauthentication_PortAuthentication_SetSystemConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Portauthentication_PortAuthentication_GetPortConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Portauthentication_PortAuthentication_UpdatePortConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Portauthentication_PortAuthentication_GetAuthorizedMACsConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Portauthentication_PortAuthentication_AddAuthorizedMACsEntryConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Portauthentication_PortAuthentication_DeleteAuthorizedMACsEntryConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Portauthentication_PortAuthentication_UpdateAuthorizedMACsEntryConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Portauthentication_PortAuthentication_GetPortStatus(GoString* param0, GoString* param1, GoInt* param2);
extern void Portauthentication_PortAuthentication_GetMACAuthorizationStatus(GoString* param0, GoString* param1, GoInt* param2);
extern void Portauthentication_PortAuthentication_Get8021XAuthorizationStatus(GoString* param0, GoString* param1, GoInt* param2);
extern void Portauthentication_PortAuthentication_GetUserStatus(GoString* param0, GoString* param1, GoInt* param2);
extern void Portauthentication_PortAuthentication_RunPortConfigLearnMACNow(GoString* param0, GoString* param1, GoInt* param2);
extern void Portauthentication_PortAuthentication_RunPortConfigReauthenticate(GoString* param0, GoString* param1, GoInt* param2);
extern void Portauthentication_PortAuthentication_RunPortConfigUnauthorizeMAC(GoString* param0, GoString* param1, GoInt* param2);
extern void Portauthentication_PortAuthentication_SetAuthenticationServers(GoString* param0, GoString* param1, GoInt* param2);
extern void Portsecurity_PortSecurity_GetConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Portsecurity_PortSecurity_UpdatePortSecurityConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Portsecurity_PortSecurity_AddPortSecureEntry(GoString* param0, GoString* param1, GoInt* param2);
extern void Portsecurity_PortSecurity_DeletePortSecureEntry(GoString* param0, GoString* param1, GoInt* param2);
extern void Portsecurity_PortSecurity_GetPortSecurityInfo(GoString* param0, GoString* param1, GoInt* param2);
extern void Ptp_PTP_GetConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Ptp_PTP_SetConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Ptp_PTP_GetStatus(GoString* param0, GoString* param1, GoInt* param2);
extern void Ptp_PTP_GetClockStatus(GoString* param0, GoString* param1, GoInt* param2);
extern void Ptp_PTP_GetTimeStatus(GoString* param0, GoString* param1, GoInt* param2);
extern void Qos_QoS_GetMode(GoString* param0, GoString* param1, GoInt* param2);
extern void Qos_QoS_SetMode(GoString* param0, GoString* param1, GoInt* param2);
extern void Qos_QoS_GetTrustMode(GoString* param0, GoString* param1, GoInt* param2);
extern void Qos_QoS_SetTrustMode(GoString* param0, GoString* param1, GoInt* param2);
extern void Qos_QoS_GetQueueList(GoString* param0, GoString* param1, GoInt* param2);
extern void Qos_QoS_SetAllQueueListPriorityScheme(GoString* param0, GoString* param1, GoInt* param2);
extern void Qos_QoS_UpdateQueueEntry(GoString* param0, GoString* param1, GoInt* param2);
extern void Qos_QoS_UpdateQueueList(GoString* param0, GoString* param1, GoInt* param2);
extern void Qos_QoS_GetCoSList(GoString* param0, GoString* param1, GoInt* param2);
extern void Qos_QoS_UpdateCoSEntry(GoString* param0, GoString* param1, GoInt* param2);
extern void Qos_QoS_UpdateCoSList(GoString* param0, GoString* param1, GoInt* param2);
extern void Qos_QoS_GetDSCPList(GoString* param0, GoString* param1, GoInt* param2);
extern void Qos_QoS_UpdateDSCPEntry(GoString* param0, GoString* param1, GoInt* param2);
extern void Qos_QoS_UpdateDSCPList(GoString* param0, GoString* param1, GoInt* param2);
extern void Qos_QoS_GetInterfaceList(GoString* param0, GoString* param1, GoInt* param2);
extern void Qos_QoS_UpdateInterfaceEntry(GoString* param0, GoString* param1, GoInt* param2);
extern void Qos_QoS_UpdateInterfaceList(GoString* param0, GoString* param1, GoInt* param2);
extern void Rmon_RMON_RunClearAllCounter(GoString* param0, GoString* param1, GoInt* param2);
extern void Rmon_RMON_GetIngress(GoString* param0, GoString* param1, GoInt* param2);
extern void Rmon_RMON_GetEgress(GoString* param0, GoString* param1, GoInt* param2);
extern void Rmon_RMON_GetHistogram(GoString* param0, GoString* param1, GoInt* param2);
extern void Rmon_RMON_GetUtilization(GoString* param0, GoString* param1, GoInt* param2);
extern void Sfp_SFP_GetConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Sfp_SFP_SetConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Sfp_SFP_GetStatus(GoString* param0, GoString* param1, GoInt* param2);
extern void Stormcontrol_StormControl_GetConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Stormcontrol_StormControl_SetEnabled(GoString* param0, GoString* param1, GoInt* param2);
extern void Stormcontrol_StormControl_GetEnabled(GoString* param0, GoString* param1, GoInt* param2);
extern void Stormcontrol_StormControl_GetPortConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Stormcontrol_StormControl_UpdatePortConfigEntry(GoString* param0, GoString* param1, GoInt* param2);
extern void Stormcontrol_StormControl_UpdatePortConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Stp_MSTP_GetConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Stp_MSTP_SetConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Stp_MSTP_SetCistConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Stp_MSTP_SetMstiConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Stp_MSTP_GetCistStatus(GoString* param0, GoString* param1, GoInt* param2);
extern void Stp_MSTP_GetMstiStatus(GoString* param0, GoString* param1, GoInt* param2);
extern void Stp_MSTP_RunReconfigPortState(GoString* param0, GoString* param1, GoInt* param2);
extern void Stp_MSTP_GetBridgeConfigMode(GoString* param0, GoString* param1, GoInt* param2);
extern void Stp_MSTP_SetBridgeConfigMode(GoString* param0, GoString* param1, GoInt* param2);
extern void Stp_MSTP_GetBridgeConfigPriority(GoString* param0, GoString* param1, GoInt* param2);
extern void Stp_MSTP_SetBridgeConfigPriority(GoString* param0, GoString* param1, GoInt* param2);
extern void Stp_MSTP_GetBridgeConfigHelloTime(GoString* param0, GoString* param1, GoInt* param2);
extern void Stp_MSTP_SetBridgeConfigHelloTime(GoString* param0, GoString* param1, GoInt* param2);
extern void Stp_MSTP_GetBridgeConfigMaxAge(GoString* param0, GoString* param1, GoInt* param2);
extern void Stp_MSTP_SetBridgeConfigMaxAge(GoString* param0, GoString* param1, GoInt* param2);
extern void Stp_MSTP_GetBridgeConfigForwardDelay(GoString* param0, GoString* param1, GoInt* param2);
extern void Stp_MSTP_SetBridgeConfigForwardDelay(GoString* param0, GoString* param1, GoInt* param2);
extern void Stp_MSTP_GetBridgeConfigTxHoldCount(GoString* param0, GoString* param1, GoInt* param2);
extern void Stp_MSTP_SetBridgeConfigTxHoldCount(GoString* param0, GoString* param1, GoInt* param2);
extern void Stp_MSTP_GetBridgeConfigMSTPRegionName(GoString* param0, GoString* param1, GoInt* param2);
extern void Stp_MSTP_SetBridgeConfigMSTPRegionName(GoString* param0, GoString* param1, GoInt* param2);
extern void Stp_MSTP_GetBridgeConfigMSTPRevisionLevel(GoString* param0, GoString* param1, GoInt* param2);
extern void Stp_MSTP_SetBridgeConfigMSTPRevisionLevel(GoString* param0, GoString* param1, GoInt* param2);
extern void Stp_MSTP_GetBridgeConfigMSTPMaxHops(GoString* param0, GoString* param1, GoInt* param2);
extern void Stp_MSTP_SetBridgeConfigMSTPMaxHops(GoString* param0, GoString* param1, GoInt* param2);
extern void Stp_MSTP_GetPortConfigEnabled(GoString* param0, GoString* param1, GoInt* param2);
extern void Stp_MSTP_SetPortConfigEnabled(GoString* param0, GoString* param1, GoInt* param2);
extern void Stp_MSTP_GetPortConfigPriority(GoString* param0, GoString* param1, GoInt* param2);
extern void Stp_MSTP_SetPortConfigPriority(GoString* param0, GoString* param1, GoInt* param2);
extern void Stp_MSTP_GetPortConfigAdminP2PPort(GoString* param0, GoString* param1, GoInt* param2);
extern void Stp_MSTP_SetPortConfigAdminP2PPort(GoString* param0, GoString* param1, GoInt* param2);
extern void Stp_MSTP_GetPortConfigAdminEdgePort(GoString* param0, GoString* param1, GoInt* param2);
extern void Stp_MSTP_SetPortConfigAdminEdgePort(GoString* param0, GoString* param1, GoInt* param2);
extern void Stp_MSTP_GetPortConfigAdminPathCost(GoString* param0, GoString* param1, GoInt* param2);
extern void Stp_MSTP_SetPortConfigAdminPathCost(GoString* param0, GoString* param1, GoInt* param2);
extern void Stp_MSTP_GetPortConfigMSTPDefaultPriority(GoString* param0, GoString* param1, GoInt* param2);
extern void Stp_MSTP_SetPortConfigMSTPDefaultPriority(GoString* param0, GoString* param1, GoInt* param2);
extern void Stp_MSTP_GetPortConfigMSTPPortPriority(GoString* param0, GoString* param1, GoInt* param2);
extern void Stp_MSTP_SetPortConfigMSTPPortPriority(GoString* param0, GoString* param1, GoInt* param2);
extern void Stp_MSTP_GetPortConfigMSTPDefaultAdminPathCost(GoString* param0, GoString* param1, GoInt* param2);
extern void Stp_MSTP_SetPortConfigMSTPDefaultAdminPathCost(GoString* param0, GoString* param1, GoInt* param2);
extern void Stp_MSTP_GetPortConfigMSTPPortAdminPathCost(GoString* param0, GoString* param1, GoInt* param2);
extern void Stp_MSTP_SetPortConfigMSTPPortAdminPathCost(GoString* param0, GoString* param1, GoInt* param2);
extern void Stp_MSTP_GetPortConfigBPDUGuard(GoString* param0, GoString* param1, GoInt* param2);
extern void Stp_MSTP_SetPortConfigBPDUGuard(GoString* param0, GoString* param1, GoInt* param2);
extern void Stp_MSTP_GetPortConfigBPDUReceiveOnly(GoString* param0, GoString* param1, GoInt* param2);
extern void Stp_MSTP_SetPortConfigBPDUReceiveOnly(GoString* param0, GoString* param1, GoInt* param2);
extern void Stp_MSTP_GetPortConfigRestrictTcn(GoString* param0, GoString* param1, GoInt* param2);
extern void Stp_MSTP_SetPortConfigRestrictTcn(GoString* param0, GoString* param1, GoInt* param2);
extern void Stp_MSTP_GetPortConfigRestrictRoot(GoString* param0, GoString* param1, GoInt* param2);
extern void Stp_MSTP_SetPortConfigRestrictRoot(GoString* param0, GoString* param1, GoInt* param2);
extern void Stp_MSTP_GetMSTPGroup(GoString* param0, GoString* param1, GoInt* param2);
extern void Stp_MSTP_SetMSTPGroup(GoString* param0, GoString* param1, GoInt* param2);
extern void Stp_MSTP_DeleteMSTPGroup(GoString* param0, GoString* param1, GoInt* param2);
extern void System_System_GetConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void System_System_SetConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void System_System_GetStatus(GoString* param0, GoString* param1, GoInt* param2);
extern void Time_Time_GetConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Time_Time_SetConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Time_Time_GetStatus(GoString* param0, GoString* param1, GoInt* param2);
extern void Time_Time_GetTimeDate(GoString* param0, GoString* param1, GoInt* param2);
extern void Time_Time_RunSyncNow(GoString* param0, GoString* param1, GoInt* param2);
extern void Time_Time_RunListTimeZones(GoString* param0, GoString* param1, GoInt* param2);
extern void Time_Time_GetCorrectionTime(GoString* param0, GoString* param1, GoInt* param2);
extern void Time_Time_GetCorrectionTimeWithInt64(GoString* param0, GoString* param1, GoInt* param2);
extern void Time_Time_GetUTC(GoString* param0, GoString* param1, GoInt* param2);
extern void Timerange_TimeRange_GetConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Timerange_TimeRange_GetStatus(GoString* param0, GoString* param1, GoInt* param2);
extern void Timerange_TimeRange_AddTimeRange(GoString* param0, GoString* param1, GoInt* param2);
extern void Timerange_TimeRange_DeleteTimeRange(GoString* param0, GoString* param1, GoInt* param2);
extern void Timerange_TimeRange_UpdateTimeRange(GoString* param0, GoString* param1, GoInt* param2);
extern void Timesync_TimeSync_SetGNSSConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Timesync_TimeSync_GetGNSSConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Timesync_TimeSync_GetGNSSStatus(GoString* param0, GoString* param1, GoInt* param2);
extern void Timesync_TimeSync_SetSyncEConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Timesync_TimeSync_GetSyncEConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Timesync_TimeSync_GetSyncEStatus(GoString* param0, GoString* param1, GoInt* param2);
extern void Timesync_TimeSync_SetSyncSourceConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Timesync_TimeSync_GetSyncSourceConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Timesync_TimeSync_GetSyncSourceStatus(GoString* param0, GoString* param1, GoInt* param2);
extern void Timesync_TimeSync_SetReferenceOutput(GoString* param0, GoString* param1, GoInt* param2);
extern void Timesync_TimeSync_GetReferenceOutput(GoString* param0, GoString* param1, GoInt* param2);
extern void Udld_UDLD_GetStatus(GoString* param0, GoString* param1, GoInt* param2);
extern void Udld_UDLD_RunRestorePortStatus(GoString* param0, GoString* param1, GoInt* param2);
extern void Udld_UDLD_GetConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Udld_UDLD_GetBasicConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Udld_UDLD_UpdateBasicConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Udld_UDLD_GetPortConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Udld_UDLD_UpdatePortConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Udld_UDLD_UpdatePortConfigEntry(GoString* param0, GoString* param1, GoInt* param2);
extern void Udld_UDLD_GetStatistics(GoString* param0, GoString* param1, GoInt* param2);
extern void Udld_UDLD_RunClearStatistics(GoString* param0, GoString* param1, GoInt* param2);
extern void Userinterface_UserInterface_GetConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Userinterface_UserInterface_GetCLIConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Userinterface_UserInterface_SetCLIConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Userinterface_UserInterface_GetWebConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Userinterface_UserInterface_SetWebConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Userinterface_UserInterface_RunRestartWebServer(GoString* param0, GoString* param1, GoInt* param2);
extern void Userinterface_UserInterface_GetSNMPConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Userinterface_UserInterface_SetSNMPConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Userinterface_UserInterface_RunRestartSNMPServer(GoString* param0, GoString* param1, GoInt* param2);
extern void Vlan_VLAN_GetConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Vlan_VLAN_GetStatus(GoString* param0, GoString* param1, GoInt* param2);
extern void Vlan_VLAN_GetManagementConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Vlan_VLAN_UpdateManagementConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Vlan_VLAN_GetVoiceConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Vlan_VLAN_UpdateVoiceConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Vlan_VLAN_GetFiltersConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Vlan_VLAN_AddFilter(GoString* param0, GoString* param1, GoInt* param2);
extern void Vlan_VLAN_UpdateFilter(GoString* param0, GoString* param1, GoInt* param2);
extern void Vlan_VLAN_DeleteFilter(GoString* param0, GoString* param1, GoInt* param2);
extern void Vlan_VLAN_GetPortsConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Vlan_VLAN_UpdatePortsConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Vlan_VLAN_GetMappingConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Vlan_VLAN_AddMapping(GoString* param0, GoString* param1, GoInt* param2);
extern void Vlan_VLAN_DeleteMapping(GoString* param0, GoString* param1, GoInt* param2);
extern void Vlan_VLAN_UpdateMappingPortEntry(GoString* param0, GoString* param1, GoInt* param2);
extern void Vlan_VLAN_GetSelectiveQinQConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Vlan_VLAN_AddSelectiveQinQ(GoString* param0, GoString* param1, GoInt* param2);
extern void Vlan_VLAN_UpdateSelectiveQinQ(GoString* param0, GoString* param1, GoInt* param2);
extern void Vlan_VLAN_DeleteSelectiveQinQ(GoString* param0, GoString* param1, GoInt* param2);
extern void Vlan_VLAN_GetProtocolBasedConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Vlan_VLAN_AddProtocolBasedGroup(GoString* param0, GoString* param1, GoInt* param2);
extern void Vlan_VLAN_UpdateProtocolBasedGroup(GoString* param0, GoString* param1, GoInt* param2);
extern void Vlan_VLAN_DeleteProtocolBasedGroup(GoString* param0, GoString* param1, GoInt* param2);
extern void Vlan_VLAN_AddProtocolBasedGroupMember(GoString* param0, GoString* param1, GoInt* param2);
extern void Vlan_VLAN_UpdateProtocolBasedGroupMember(GoString* param0, GoString* param1, GoInt* param2);
extern void Vlan_VLAN_DeleteProtocolBasedGroupMember(GoString* param0, GoString* param1, GoInt* param2);
extern void Vlan_VLAN_GetMACBasedConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Vlan_VLAN_AddMACBasedGroup(GoString* param0, GoString* param1, GoInt* param2);
extern void Vlan_VLAN_UpdateMACBasedGroup(GoString* param0, GoString* param1, GoInt* param2);
extern void Vlan_VLAN_DeleteMACBasedGroup(GoString* param0, GoString* param1, GoInt* param2);
extern void Vlan_VLAN_AddMACBasedGroupMember(GoString* param0, GoString* param1, GoInt* param2);
extern void Vlan_VLAN_UpdateMACBasedGroupMember(GoString* param0, GoString* param1, GoInt* param2);
extern void Vlan_VLAN_DeleteMACBasedGroupMember(GoString* param0, GoString* param1, GoInt* param2);
extern void Vlan_VLAN_GetSubnetBasedConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Vlan_VLAN_AddSubnetBasedGroup(GoString* param0, GoString* param1, GoInt* param2);
extern void Vlan_VLAN_UpdateSubnetBasedGroup(GoString* param0, GoString* param1, GoInt* param2);
extern void Vlan_VLAN_DeleteSubnetBasedGroup(GoString* param0, GoString* param1, GoInt* param2);
extern void Vlan_VLAN_AddSubnetBasedGroupMember(GoString* param0, GoString* param1, GoInt* param2);
extern void Vlan_VLAN_UpdateSubnetBasedGroupMember(GoString* param0, GoString* param1, GoInt* param2);
extern void Vlan_VLAN_DeleteSubnetBasedGroupMember(GoString* param0, GoString* param1, GoInt* param2);
extern void Vlan_VLAN_GetManagementVlanPorts(GoString* param0, GoString* param1, GoInt* param2);
extern void Vlan_VLAN_SetDefaultPortVlan(GoString* param0, GoString* param1, GoInt* param2);
extern void Vlan_VLAN_ClearDefaultPortVlan(GoString* param0, GoString* param1, GoInt* param2);
extern void Vlan_VLAN_UpdateVlanPortVlanStatus(GoString* param0, GoString* param1, GoInt* param2);
extern void Vlan_VLAN_DeleteVlanPortVlanStatus(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Device_RunCPSSInit(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Device_GetArchitecture(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Trunking_SetGroup(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Trunking_AddGroup(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Trunking_DeleteGroup(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Trunking_SetLoadBalanceMode(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Trunking_GetLoadBalanceMode(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Trunking_GetGroup(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_ACL_RunClearAllRules(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_ACL_UpdateControlRule(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_ACL_AddControlRule(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_ACL_DeleteControlRule(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_ACL_RunClearControlRule(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_ACL_AddUserDefinedRules(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_ACL_DeleteUserDefinedRules(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_ACL_RunClearAllUserDefinedRules(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_CNC_AddCounting(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_CNC_DeleteCounting(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_CNC_GetCounter(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_FDB_SetAutoLearnEnable(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_FDB_SetEntry(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_FDB_DeleteEntry(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_FDB_SetAgingTime(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_FDB_GetAgingTime(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_FDB_SetSecureBreachNaPortEnable(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_FDB_GetSecureBreachNaPortEnable(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_FDB_GetCounter(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_FDB_RunFlush(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_FDB_RunDump(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Mirroring_RunClearAll(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Mirroring_SetSessions(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Mirroring_SetPolicyBased(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Misc_RunMACRegisterWrite(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Misc_RunMACRegisterRead(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Misc_RunSMIRegisterWrite(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Misc_RunSMIRegisterRead(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Misc_RunXSMIRegisterWrite(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Misc_RunXSMIRegisterRead(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Misc_GetCPUTemperature(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Misc_GetMACTemperature(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Misc_GetPHYPortTemperature(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Misc_GetCPUModel(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Misc_GetPHYPortModel(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Vlan_AddGroup(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Vlan_DeleteGroup(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Vlan_AddMember(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Vlan_DeleteMember(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Vlan_UpdateAcceptFrameType(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Vlan_GetAcceptFrameType(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Vlan_UpdateDefaultVID(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Vlan_GetDefaultVID(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Vlan_RunFlush(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Vlan_GetStatus(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Vlan_UpdateTPIDEntry(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Vlan_DumpTPIDTable(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Vlan_UpdateTPIDIndex(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Vlan_GetTPIDIndex(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Vlan_RunClearTPIDIndex(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Vlan_SetTunnelEnable(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Vlan_GetTunnelEnable(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Vlan_UpdateProtocolClass(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Vlan_GetProtocolClass(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Vlan_RunClearProtocolClass(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Vlan_UpdateProtocol(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Vlan_GetProtocol(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Vlan_RunClearProtocol(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Vlan_UpdateTranslationEnable(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Vlan_GetTranslationEnable(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Vlan_UpdateTranslationMapping(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Vlan_GetTranslationMapping(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Vlan_RunClearTranslationMapping(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Multicast_SetBridgeGroup(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Multicast_DeleteBridgeGroup(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Multicast_SetUnregisteredFlooding(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Multicast_RunClearUnregisteredFlooding(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Multicast_RunDump(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Multicast_RunFlush(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_PacketControl_UpdateSTPControl(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_PacketControl_UpdateLACPControl(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_PacketControl_UpdateDot1XControl(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_PacketControl_UpdateLoopControl(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_PacketControl_UpdateDHCPv4DiscoverControl(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_PacketControl_UpdateDHCPv4BroadcastOfferControl(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_PacketControl_UpdateDHCPv4UDPDestination68Control(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_PacketControl_UpdateDHCPv4UDPDestination67Control(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_PacketControl_UpdateARPControl(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_PacketControl_UpdateIGMPVlanControl(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_PacketControl_UpdateMLDVlanControl(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_PacketControl_UpdateGVRPControl(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_PacketControl_GetStatus(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Policer_SetStormCountingEnable(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Policer_GetStormCountingEnable(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Policer_GetStormCountingCounter(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Port_SetEnable(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Port_GetEnable(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Port_SetSpeedDuplex(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Port_GetSpeedDuplex(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Port_SetFlowControl(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Port_GetFlowControl(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Port_SetEnableEEE(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Port_GetEnableEEE(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Port_GetCounter(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Port_RunClearCounter(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Port_SetIsolation(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Port_GetIsolation(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Port_GetIPG(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Port_GetFaultStatus(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_Port_GetStatus(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_PTP_SetMode(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_PTP_GetIngrTS(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_PTP_GetEgrTS(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_PTP_SetLinkDelay(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_PTP_GetLinkDelay(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_PTP_SetEnableSyncE(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_PTP_SetToD(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_PTP_GetToD(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_PTP_SetToDFrequency(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_PTP_SetPortDelay(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_PTP_GetPortDelay(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_QoS_SetQoSPortProfile(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_QoS_GetQoSPortProfile(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_QoS_SetQoSCoSProfile(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_QoS_GetQoSCoSProfile(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_QoS_SetQoSDSCPProfile(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_QoS_GetQoSDSCPProfile(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_QoS_SetQoSQueueProfile(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_QoS_GetQoSQueueProfile(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_RateLimiting_SetIngress(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_RateLimiting_GetIngress(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_RateLimiting_SetEgress(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_RateLimiting_GetEgress(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_STP_SetPortState(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_STP_GetPortState(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_STP_SetVlanBinding(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_STP_GetVlanBinding(GoString* param0, GoString* param1, GoInt* param2);
extern void Cpss_STP_RunClearVlanBinding(GoString* param0, GoString* param1, GoInt* param2);
extern void Device_Device_GetMACAddress(GoString* param0, GoString* param1, GoInt* param2);
extern void Device_Device_GetPortLists(GoString* param0, GoString* param1, GoInt* param2);
extern void Device_Device_GetLAGPortLists(GoString* param0, GoString* param1, GoInt* param2);
extern void Device_Device_GetPoEPortLists(GoString* param0, GoString* param1, GoInt* param2);
extern void Device_Device_GetHardwareTableSize(GoString* param0, GoString* param1, GoInt* param2);
extern void Device_Device_GetDeviceInfo(GoString* param0, GoString* param1, GoInt* param2);
extern void Device_Device_GetBoardInfo(GoString* param0, GoString* param1, GoInt* param2);
extern void Device_Device_GetHardwareInfo(GoString* param0, GoString* param1, GoInt* param2);
extern void Device_Device_GetFunctionControl(GoString* param0, GoString* param1, GoInt* param2);
extern void Device_Device_GetBoundary(GoString* param0, GoString* param1, GoInt* param2);
extern void Device_Device_GetPath(GoString* param0, GoString* param1, GoInt* param2);
extern void Device_Device_GetTimeControlInfo(GoString* param0, GoString* param1, GoInt* param2);
extern void Event_Event_WaitInLine(GoString* param0, GoString* param1, GoInt* param2);
extern void Event_Event_SetManagmentVLANPriority(GoString* param0, GoString* param1, GoInt* param2);
extern void Event_Event_EncodeDecode(GoString* param0, GoString* param1, GoInt* param2);
extern void Event_Event_Base64Encode(GoString* param0, GoString* param1, GoInt* param2);
extern void Event_Event_Base64Decode(GoString* param0, GoString* param1, GoInt* param2);
extern void Hardware_Hardware_GetSFPPlugin(GoString* param0, GoString* param1, GoInt* param2);
extern void Hardware_Hardware_GetSFPRxLoss(GoString* param0, GoString* param1, GoInt* param2);
extern void Hardware_Hardware_GetSFPTxFaild(GoString* param0, GoString* param1, GoInt* param2);
extern void Hardware_Hardware_GetSFPRom(GoString* param0, GoString* param1, GoInt* param2);
extern void Hardware_Hardware_GetSFPTxDisable(GoString* param0, GoString* param1, GoInt* param2);
extern void Hardware_Hardware_SetSFPTxDisable(GoString* param0, GoString* param1, GoInt* param2);
extern void Hardware_Hardware_GetSFPLED(GoString* param0, GoString* param1, GoInt* param2);
extern void Hardware_Hardware_SetSFPLED(GoString* param0, GoString* param1, GoInt* param2);
extern void Hardware_Hardware_GetResetButtonStatus(GoString* param0, GoString* param1, GoInt* param2);
extern void Hardware_Hardware_GetConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Hardware_Hardware_SetConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Hardware_Hardware_GetPortInfo(GoString* param0, GoString* param1, GoInt* param2);
extern void Hardware_Hardware_GetTemperature(GoString* param0, GoString* param1, GoInt* param2);
extern void Hardware_Hardware_GetPowerStatus(GoString* param0, GoString* param1, GoInt* param2);
extern void Hardware_Hardware_GetGPS(GoString* param0, GoString* param1, GoInt* param2);
extern void Hardware_Hardware_SetGPS(GoString* param0, GoString* param1, GoInt* param2);
extern void Hardware_Hardware_SetGPSCommand(GoString* param0, GoString* param1, GoInt* param2);
extern void Hardware_Hardware_GetSystemLED(GoString* param0, GoString* param1, GoInt* param2);
extern void Hardware_Hardware_SetSystemLED(GoString* param0, GoString* param1, GoInt* param2);
extern void Hardware_Hardware_SetFanSpeed(GoString* param0, GoString* param1, GoInt* param2);
extern void Hardware_Hardware_GetFanSpeed(GoString* param0, GoString* param1, GoInt* param2);
extern void Hardware_Hardware_SetGPSLED(GoString* param0, GoString* param1, GoInt* param2);
extern void Hardware_Hardware_GetGPSLED(GoString* param0, GoString* param1, GoInt* param2);
extern void Hardware_Hardware_SetFanLED(GoString* param0, GoString* param1, GoInt* param2);
extern void Hardware_Hardware_GetFanLED(GoString* param0, GoString* param1, GoInt* param2);
extern void Hardware_Hardware_SetUSBEnable(GoString* param0, GoString* param1, GoInt* param2);
extern void Hardware_Hardware_GetUSBStatus(GoString* param0, GoString* param1, GoInt* param2);
extern void Hardware_Hardware_SetHeater(GoString* param0, GoString* param1, GoInt* param2);
extern void Hardware_Hardware_GetHeater(GoString* param0, GoString* param1, GoInt* param2);
extern void Hardware_Hardware_GetMCUVersion(GoString* param0, GoString* param1, GoInt* param2);
extern void Hardware_Hardware_GetI2CDevice(GoString* param0, GoString* param1, GoInt* param2);
extern void Hardware_Hardware_GetCPU(GoString* param0, GoString* param1, GoInt* param2);
extern void Hardware_Hardware_GetMemoryTotal(GoString* param0, GoString* param1, GoInt* param2);
extern void Hardware_Hardware_RunMemoryTest(GoString* param0, GoString* param1, GoInt* param2);
extern void Hardware_Hardware_GetECCState(GoString* param0, GoString* param1, GoInt* param2);
extern void Hardware_Hardware_GetSPI(GoString* param0, GoString* param1, GoInt* param2);
extern void Hardware_Hardware_GetSPIPartition(GoString* param0, GoString* param1, GoInt* param2);
extern void Hardware_Hardware_GetSPIFlash(GoString* param0, GoString* param1, GoInt* param2);
extern void Hardware_Hardware_GeteMMC(GoString* param0, GoString* param1, GoInt* param2);
extern void Hardware_Hardware_GeteMMCPartition(GoString* param0, GoString* param1, GoInt* param2);
extern void Hardware_Hardware_SetWatchDog(GoString* param0, GoString* param1, GoInt* param2);
extern void Hardware_Hardware_GetSecureICExist(GoString* param0, GoString* param1, GoInt* param2);
extern void Hardware_Hardware_RunSecureICVerify(GoString* param0, GoString* param1, GoInt* param2);
extern void Hardware_Hardware_GetRTC(GoString* param0, GoString* param1, GoInt* param2);
extern void Hardware_Hardware_SetRTC(GoString* param0, GoString* param1, GoInt* param2);
extern void Hardware_Hardware_RunSync(GoString* param0, GoString* param1, GoInt* param2);
extern void Hardware_Hardware_SetNetwork(GoString* param0, GoString* param1, GoInt* param2);
extern void Hardware_Hardware_GetNetwork(GoString* param0, GoString* param1, GoInt* param2);
extern void Hardware_Hardware_SetUSBNetwork(GoString* param0, GoString* param1, GoInt* param2);
extern void Hardware_Hardware_GetUSBNetwork(GoString* param0, GoString* param1, GoInt* param2);
extern void Hardware_Hardware_RunPing(GoString* param0, GoString* param1, GoInt* param2);
extern void Hardware_Hardware_RunProdMode(GoString* param0, GoString* param1, GoInt* param2);
extern void Hardware_Hardware_GetTimeControlRegister(GoString* param0, GoString* param1, GoInt* param2);
extern void Hardware_Hardware_SetTimeControlRegister(GoString* param0, GoString* param1, GoInt* param2);
extern void Hardware_HardwarePoE_SetSystemBudget(GoString* param0, GoString* param1, GoInt* param2);
extern void Hardware_HardwarePoE_SetPortSetting(GoString* param0, GoString* param1, GoInt* param2);
extern void Hardware_HardwarePoE_GetPortSetting(GoString* param0, GoString* param1, GoInt* param2);
extern void Hardware_HardwarePoE_GetSystemStatus(GoString* param0, GoString* param1, GoInt* param2);
extern void Hardware_HardwarePoE_GetPortStatus(GoString* param0, GoString* param1, GoInt* param2);
extern void Hardware_HardwarePoE_SetPortLED(GoString* param0, GoString* param1, GoInt* param2);
extern void Hardware_HardwarePoE_GetPortLED(GoString* param0, GoString* param1, GoInt* param2);
extern void Hardware_HardwarePoE_GetPoEMaxLED(GoString* param0, GoString* param1, GoInt* param2);
extern void Hardware_HardwarePoE_SetPoEMaxLED(GoString* param0, GoString* param1, GoInt* param2);
extern void Log_Log_GetConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Log_Log_GetBasicConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Log_Log_UpdateBasicConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Log_Log_GetTargetConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Log_Log_AddTargetConfigEntry(GoString* param0, GoString* param1, GoInt* param2);
extern void Log_Log_UpdateTargetConfigEntry(GoString* param0, GoString* param1, GoInt* param2);
extern void Log_Log_DeleteTargetConfigEntry(GoString* param0, GoString* param1, GoInt* param2);
extern void Log_Log_GetActionConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Log_Log_UpdateActionConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Log_Log_RunSendTestEvent(GoString* param0, GoString* param1, GoInt* param2);
extern void Log_Log_GetStatistics(GoString* param0, GoString* param1, GoInt* param2);
extern void Log_Log_RunCleanStatistics(GoString* param0, GoString* param1, GoInt* param2);
extern void Log_Log_GetRecordTargetLogList(GoString* param0, GoString* param1, GoInt* param2);
extern void Log_Log_RunCleanRecordTargetLogList(GoString* param0, GoString* param1, GoInt* param2);
extern void Log_Log_RunSaveLogToYAML(GoString* param0, GoString* param1, GoInt* param2);
extern void Snmp_SNMP_SetConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Snmp_SNMP_SetUsersConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Snmp_SNMP_SetGroupsConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Snmp_SNMP_RunRestartSNMPServer(GoString* param0, GoString* param1, GoInt* param2);
extern void Snmp_SNMP_ActivateAgentCertificate(GoString* param0, GoString* param1, GoInt* param2);
extern void Snmp_SNMP_ActivateManagerCertificate(GoString* param0, GoString* param1, GoInt* param2);
extern void Snmp_SNMP_DeactivateManagerCertificate(GoString* param0, GoString* param1, GoInt* param2);
extern void Snmp_SNMP_GetEngineInfo(GoString* param0, GoString* param1, GoInt* param2);
extern void Snmptrap_SNMPTrap_SetUsersConfig(GoString* param0, GoString* param1, GoInt* param2);
extern void Snmptrap_SNMPTrap_SetEngineID(GoString* param0, GoString* param1, GoInt* param2);
extern void Snmptrap_SNMPTrap_GetTrapCounters(GoString* param0, GoString* param1, GoInt* param2);
extern void Timecontrol_TimeControl_GetInputMonitorStatus(GoString* param0, GoString* param1, GoInt* param2);
extern void Timecontrol_TimeControl_GetDPLLStatus(GoString* param0, GoString* param1, GoInt* param2);
extern void Timecontrol_TimeControl_SetDPLLRefPriority(GoString* param0, GoString* param1, GoInt* param2);
extern void Timecontrol_TimeControl_GetDPLLRefPriority(GoString* param0, GoString* param1, GoInt* param2);
extern void Timecontrol_TimeControl_SetInputClockFreq(GoString* param0, GoString* param1, GoInt* param2);
extern void Timecontrol_TimeControl_GetInputClockFreq(GoString* param0, GoString* param1, GoInt* param2);
extern void Timecontrol_TimeControl_SetToDSource(GoString* param0, GoString* param1, GoInt* param2);
extern void Timecontrol_TimeControl_GetToDSource(GoString* param0, GoString* param1, GoInt* param2);
extern void Timecontrol_TimeControl_SetToD(GoString* param0, GoString* param1, GoInt* param2);
extern void Timecontrol_TimeControl_GetToD(GoString* param0, GoString* param1, GoInt* param2);
extern void Timecontrol_TimeControl_SetFrequencyControl(GoString* param0, GoString* param1, GoInt* param2);
extern void Timecontrol_TimeControl_GetFrequencyControl(GoString* param0, GoString* param1, GoInt* param2);
extern void Timecontrol_TimeControl_SetPhaseControl(GoString* param0, GoString* param1, GoInt* param2);
extern void Timecontrol_TimeControl_GetPhaseControl(GoString* param0, GoString* param1, GoInt* param2);
extern void Timecontrol_TimeControl_SetPhaseSlopeLimit(GoString* param0, GoString* param1, GoInt* param2);
extern void Timecontrol_TimeControl_GetPhaseSlopeLimit(GoString* param0, GoString* param1, GoInt* param2);
extern void Timecontrol_TimeControl_SetPhaseControlTimer(GoString* param0, GoString* param1, GoInt* param2);
extern void Timecontrol_TimeControl_GetPhaseControlTimer(GoString* param0, GoString* param1, GoInt* param2);

#ifdef __cplusplus
}
#endif
