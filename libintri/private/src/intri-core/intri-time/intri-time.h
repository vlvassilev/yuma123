
#ifndef _H_intri_time
#define _H_intri_time
/* 
 * Copyright (c) 2008-2012, Andy Bierman, All Rights Reserved.
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *

*** Generated by yangdump 2.13-0

  Combined SIL header
  module intri-time
  revision 2022-06-14
  namespace intri:intri-time
  organization Intrising Inc.

 */

#include <libxml/xmlstring.h>

#include "dlq.h"
#include "ncxtypes.h"
#include "op.h"
#include "status.h"
#include "val.h"

#ifdef __cplusplus
extern "C" {
#endif

#define y_intri_time_M_intri_time (const xmlChar *)"intri-time"
#define y_intri_time_R_intri_time (const xmlChar *)"2022-06-14"

#define y_intri_time_N_Config_BackupNTPServer (const xmlChar *)"Config_BackupNTPServer"
#define y_intri_time_N_Config_DateFormat (const xmlChar *)"Config_DateFormat"
#define y_intri_time_N_Config_MainNTPServer (const xmlChar *)"Config_MainNTPServer"
#define y_intri_time_N_Config_Manual (const xmlChar *)"Config_Manual"
#define y_intri_time_N_Config_Mode (const xmlChar *)"Config_Mode"
#define y_intri_time_N_Config_SyncInterval (const xmlChar *)"Config_SyncInterval"
#define y_intri_time_N_Config_TimeFormat (const xmlChar *)"Config_TimeFormat"
#define y_intri_time_N_Config_TimeZone (const xmlChar *)"Config_TimeZone"
#define y_intri_time_N_Config_TrustedServerEnabled (const xmlChar *)"Config_TrustedServerEnabled"
#define y_intri_time_N_ListTimeZones_List (const xmlChar *)"ListTimeZones_List"
#define y_intri_time_N_Nanos (const xmlChar *)"Nanos"
#define y_intri_time_N_RequestWithInt64_Ts (const xmlChar *)"RequestWithInt64_Ts"
#define y_intri_time_N_RequestWithTimestamp_Ts (const xmlChar *)"RequestWithTimestamp_Ts"
#define y_intri_time_N_Response_Ts (const xmlChar *)"Response_Ts"
#define y_intri_time_N_Seconds (const xmlChar *)"Seconds"
#define y_intri_time_N_Status_LocalDate (const xmlChar *)"Status_LocalDate"
#define y_intri_time_N_Status_LocalTime (const xmlChar *)"Status_LocalTime"
#define y_intri_time_N_Status_Status (const xmlChar *)"Status_Status"
#define y_intri_time_N_Status_UsedNTPServer (const xmlChar *)"Status_UsedNTPServer"
#define y_intri_time_N_intri_time_get_config (const xmlChar *)"intri-time-get-config"
#define y_intri_time_N_intri_time_get_correction_time (const xmlChar *)"intri-time-get-correction-time"
#define y_intri_time_N_intri_time_get_correction_time_with_int64 (const xmlChar *)"intri-time-get-correction-time-with-int64"
#define y_intri_time_N_intri_time_get_status (const xmlChar *)"intri-time-get-status"
#define y_intri_time_N_intri_time_get_utc (const xmlChar *)"intri-time-get-utc"
#define y_intri_time_N_intri_time_run_list_timezone (const xmlChar *)"intri-time-run-list-timezone"
#define y_intri_time_N_intri_time_run_sync_now (const xmlChar *)"intri-time-run-sync-now"
#define y_intri_time_N_intri_time_set_config (const xmlChar *)"intri-time-set-config"

/* container /intri-time-get-config/output */
typedef struct y_intri_time_T_intri_time_get_config_output_ {
  xmlChar *Config_Mode;
  xmlChar *Config_MainNTPServer;
  xmlChar *Config_BackupNTPServer;
  boolean Config_TrustedServerEnabled;
  int32 Config_SyncInterval;
  xmlChar *Config_TimeZone;
  xmlChar *Config_TimeFormat;
  xmlChar *Config_DateFormat;
  xmlChar *Config_Manual;
} y_intri_time_T_intri_time_get_config_output;

/* container /intri-time-get-config/input */
typedef struct y_intri_time_T_intri_time_get_config_input_ {
} y_intri_time_T_intri_time_get_config_input;

/* rpc /intri-time-get-config */
typedef struct y_intri_time_T_intri_time_get_config_ {
  y_intri_time_T_intri_time_get_config_output output;
  y_intri_time_T_intri_time_get_config_input input;
} y_intri_time_T_intri_time_get_config;

/* container /intri-time-set-config/input */
typedef struct y_intri_time_T_intri_time_set_config_input_ {
  xmlChar *Config_Mode;
  xmlChar *Config_MainNTPServer;
  xmlChar *Config_BackupNTPServer;
  boolean Config_TrustedServerEnabled;
  int32 Config_SyncInterval;
  xmlChar *Config_TimeZone;
  xmlChar *Config_TimeFormat;
  xmlChar *Config_DateFormat;
  xmlChar *Config_Manual;
} y_intri_time_T_intri_time_set_config_input;

/* container /intri-time-set-config/output */
typedef struct y_intri_time_T_intri_time_set_config_output_ {
} y_intri_time_T_intri_time_set_config_output;

/* rpc /intri-time-set-config */
typedef struct y_intri_time_T_intri_time_set_config_ {
  y_intri_time_T_intri_time_set_config_input input;
  y_intri_time_T_intri_time_set_config_output output;
} y_intri_time_T_intri_time_set_config;

/* container /intri-time-get-status/output */
typedef struct y_intri_time_T_intri_time_get_status_output_ {
  xmlChar *Status_Status;
  xmlChar *Status_LocalTime;
  xmlChar *Status_LocalDate;
  xmlChar *Status_UsedNTPServer;
} y_intri_time_T_intri_time_get_status_output;

/* container /intri-time-get-status/input */
typedef struct y_intri_time_T_intri_time_get_status_input_ {
} y_intri_time_T_intri_time_get_status_input;

/* rpc /intri-time-get-status */
typedef struct y_intri_time_T_intri_time_get_status_ {
  y_intri_time_T_intri_time_get_status_output output;
  y_intri_time_T_intri_time_get_status_input input;
} y_intri_time_T_intri_time_get_status;

/* container /intri-time-run-sync-now/input */
typedef struct y_intri_time_T_intri_time_run_sync_now_input_ {
} y_intri_time_T_intri_time_run_sync_now_input;

/* container /intri-time-run-sync-now/output */
typedef struct y_intri_time_T_intri_time_run_sync_now_output_ {
} y_intri_time_T_intri_time_run_sync_now_output;

/* rpc /intri-time-run-sync-now */
typedef struct y_intri_time_T_intri_time_run_sync_now_ {
  y_intri_time_T_intri_time_run_sync_now_input input;
  y_intri_time_T_intri_time_run_sync_now_output output;
} y_intri_time_T_intri_time_run_sync_now;

/* container /intri-time-run-list-timezone/output */
typedef struct y_intri_time_T_intri_time_run_list_timezone_output_ {
  xmlChar *ListTimeZones_List;
} y_intri_time_T_intri_time_run_list_timezone_output;

/* container /intri-time-run-list-timezone/input */
typedef struct y_intri_time_T_intri_time_run_list_timezone_input_ {
} y_intri_time_T_intri_time_run_list_timezone_input;

/* rpc /intri-time-run-list-timezone */
typedef struct y_intri_time_T_intri_time_run_list_timezone_ {
  y_intri_time_T_intri_time_run_list_timezone_output output;
  y_intri_time_T_intri_time_run_list_timezone_input input;
} y_intri_time_T_intri_time_run_list_timezone;

/* container /intri-time-get-correction-time/input/RequestWithTimestamp_Ts */
typedef struct y_intri_time_T_intri_time_get_correction_time_input_RequestWithTimestamp_Ts_ {
  int64 Seconds;
  int32 Nanos;
} y_intri_time_T_intri_time_get_correction_time_input_RequestWithTimestamp_Ts;

/* container /intri-time-get-correction-time/input */
typedef struct y_intri_time_T_intri_time_get_correction_time_input_ {
  y_intri_time_T_intri_time_get_correction_time_input_RequestWithTimestamp_Ts RequestWithTimestamp_Ts;
} y_intri_time_T_intri_time_get_correction_time_input;

/* container /intri-time-get-correction-time/output */
typedef struct y_intri_time_T_intri_time_get_correction_time_output_ {
  xmlChar *Response_Ts;
} y_intri_time_T_intri_time_get_correction_time_output;

/* rpc /intri-time-get-correction-time */
typedef struct y_intri_time_T_intri_time_get_correction_time_ {
  y_intri_time_T_intri_time_get_correction_time_input input;
  y_intri_time_T_intri_time_get_correction_time_output output;
} y_intri_time_T_intri_time_get_correction_time;

/* container /intri-time-get-correction-time-with-int64/input */
typedef struct y_intri_time_T_intri_time_get_correction_time_with_int64_input_ {
  int64 RequestWithInt64_Ts;
} y_intri_time_T_intri_time_get_correction_time_with_int64_input;

/* container /intri-time-get-correction-time-with-int64/output */
typedef struct y_intri_time_T_intri_time_get_correction_time_with_int64_output_ {
  xmlChar *Response_Ts;
} y_intri_time_T_intri_time_get_correction_time_with_int64_output;

/* rpc /intri-time-get-correction-time-with-int64 */
typedef struct y_intri_time_T_intri_time_get_correction_time_with_int64_ {
  y_intri_time_T_intri_time_get_correction_time_with_int64_input input;
  y_intri_time_T_intri_time_get_correction_time_with_int64_output output;
} y_intri_time_T_intri_time_get_correction_time_with_int64;

/* container /intri-time-get-utc/output */
typedef struct y_intri_time_T_intri_time_get_utc_output_ {
  xmlChar *Response_Ts;
} y_intri_time_T_intri_time_get_utc_output;

/* container /intri-time-get-utc/input */
typedef struct y_intri_time_T_intri_time_get_utc_input_ {
} y_intri_time_T_intri_time_get_utc_input;

/* rpc /intri-time-get-utc */
typedef struct y_intri_time_T_intri_time_get_utc_ {
  y_intri_time_T_intri_time_get_utc_output output;
  y_intri_time_T_intri_time_get_utc_input input;
} y_intri_time_T_intri_time_get_utc;
/********************************************************************
* FUNCTION y_intri_time_init
* 
* initialize the intri-time server instrumentation library
* 
* INPUTS:
*    modname == requested module name
*    revision == requested version (NULL for any)
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t y_intri_time_init (
  const xmlChar *modname,
  const xmlChar *revision);

/********************************************************************
* FUNCTION y_intri_time_init2
* 
* SIL init phase 2: non-config data structures
* Called after running config is loaded
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t y_intri_time_init2 (void);

/********************************************************************
* FUNCTION y_intri_time_cleanup
*    cleanup the server instrumentation library
* 
********************************************************************/
extern void y_intri_time_cleanup (void);

#ifdef __cplusplus
} /* end extern 'C' */
#endif

#endif