module intri-hardware {

  namespace "intri:intri-hardware";
  prefix "intri-hardware";
  organization "
    Intrising Inc.";
  contact "
    intrising@intrising.com.tw";
  revision 2022-06-24 {
    description "Build date.";
  }

  import intri-device {
    prefix intri-device;
    revision-date "2022-06-24";
  }
  import intri-timestamp {
    prefix intri-timestamp;
    revision-date "2022-06-24";
  }
  import intri-event {
    prefix intri-event;
    revision-date "2022-06-24";
  }
  import intri-empty {
    prefix intri-empty;
    revision-date "2022-06-24";
  }
  import intri-common {
    prefix intri-common;
    revision-date "2022-06-24";
  }
  typedef PowerTypeOptions {
    type enumeration {
      enum POWER_TYPE_REDUNDANT {
        description "[REDUNDANT] Redundant Power";
        value 0;
      }
      enum POWER_TYPE_GENERAL {
        description "[GENERAL] General Power";
        value 1;
      }
    }
  }
  typedef LEDModeTypeOptions {
    type enumeration {
      enum LED_MODE_TYPE_DYNAMIC {
        description "[Dynamic] Display static states and blink when data is present on a port.";
        value 0;
      }
      enum LED_MODE_TYPE_STATIC {
        description "[Static] Display static states but do not blink with data.";
        value 1;
      }
      enum LED_MODE_TYPE_QUIET_DISPLAY {
        description "[Quiet Display] Desplay is reduced to sys and on LED,and Port LEDs remain off.";
        value 2;
      }
      enum LED_MODE_TYPE_ALL_DARK {
        description "[All Dark] This mode is not recommended, as the unit may mistakenly be deemed powered down.";
        value 3;
      }
      enum LED_MODE_TYPE_LIGHTSHOW {
        description "[Lightshow] Similar to a led_test but permanent. This may be turned on to easier locate a physical unit among others.";
        value 4;
      }
    }
  }
  typedef LEDBehaviorModeTypeOptions {
    type enumeration {
      enum LED_BEHAVIOR_MODE_TYPE_LINK1G {
        description "* internal";
        value 0;
      }
      enum LED_BEHAVIOR_MODE_TYPE_LINK5G10G {
        description "* internal";
        value 1;
      }
      enum LED_BEHAVIOR_MODE_TYPE_BLOCKED {
        description "* internal";
        value 2;
      }
      enum LED_BEHAVIOR_MODE_TYPE_REJECT {
        description "* internal";
        value 3;
      }
      enum LED_BEHAVIOR_MODE_TYPE_IDLE {
        description "* internal";
        value 4;
      }
      enum LED_BEHAVIOR_MODE_TYPE_POE {
        description "* internal";
        value 5;
      }
      enum LED_BEHAVIOR_MODE_TYPE_POEPLUS {
        description "* internal";
        value 6;
      }
      enum LED_BEHAVIOR_MODE_TYPE_POEPLUSPLUS {
        description "* internal";
        value 7;
      }
      enum LED_BEHAVIOR_MODE_TYPE_OFF {
        description "* internal";
        value 8;
      }
      enum LED_BEHAVIOR_MODE_TYPE_SYS_NORMAL {
        description "* internal";
        value 9;
      }
      enum LED_BEHAVIOR_MODE_TYPE_SYS_MINOR_ALARM {
        description "* internal";
        value 10;
      }
      enum LED_BEHAVIOR_MODE_TYPE_SYS_MAJOR_ALARM {
        description "* internal";
        value 11;
      }
      enum LED_BEHAVIOR_MODE_TYPE_USER_DEF1 {
        description "* internal";
        value 12;
      }
      enum LED_BEHAVIOR_MODE_TYPE_USER_DEF2 {
        description "* internal";
        value 13;
      }
      enum LED_BEHAVIOR_MODE_TYPE_COLOR_GREEN {
        description "* internal";
        value 14;
      }
      enum LED_BEHAVIOR_MODE_TYPE_COLOR_ORANGE {
        description "* internal";
        value 15;
      }
      enum LED_BEHAVIOR_MODE_TYPE_COLOR_RED {
        description "* internal";
        value 16;
      }
      enum LED_BEHAVIOR_MODE_TYPE_COLOR_BLUE {
        description "* internal";
        value 17;
      }
      enum LED_BEHAVIOR_MODE_TYPE_COLOR_MAGENTA {
        description "* internal";
        value 18;
      }
      enum LED_BEHAVIOR_MODE_TYPE_REQUEST_NMP_IP {
        description "* internal";
        value 19;
      }
      enum LED_BEHAVIOR_MODE_TYPE_FACTORY_DEFAULT_KEEP_NETWORK {
        description "* internal";
        value 20;
      }
      enum LED_BEHAVIOR_MODE_TYPE_FACTORY_DEFAULT_KEEP_NONE {
        description "* internal";
        value 21;
      }
      enum LED_BEHAVIOR_MODE_TYPE_FACTORY_DEFAULT_NO_OPERATION {
        description "* internal";
        value 22;
      }
      enum LED_BEHAVIOR_MODE_TYPE_BLINKING_NORMAL {
        description "* internal blink 1 time a 200 milliseconds.";
        value 23;
      }
      enum LED_BEHAVIOR_MODE_TYPE_BLINKING_SLOW {
        description "* internal blink 1 time a 500 milliseconds.";
        value 24;
      }
      enum LED_BEHAVIOR_MODE_TYPE_BLINKING_FAST {
        description "* internal blink 1 time a 100 milliseconds.";
        value 25;
      }
      enum LED_BEHAVIOR_MODE_TYPE_NA {
        description "* internal This LED is not support";
        value 9999;
      }
    }
  }
  typedef LEDTypeOptions {
    type enumeration {
      enum LED_TYPE_SYSTEM {
        description "";
        value 0;
      }
      enum LED_TYPE_GPS {
        description "";
        value 1;
      }
      enum LED_TYPE_POEMAX {
        description "";
        value 2;
      }
      enum LED_TYPE_FAN {
        description "";
        value 3;
      }
      enum LED_TYPE_POE {
        description "";
        value 4;
      }
      enum LED_TYPE_SFP {
        description "";
        value 5;
      }
    }
  }
  typedef PoEPriorityLevelTypeOptions {
    type enumeration {
      enum POE_PRIORITY_LEVEL_TYPE_UNKNOWN {
        description "[Unknown] Priority unknow";
        value 0;
      }
      enum POE_PRIORITY_LEVEL_TYPE_LOW {
        description "[Low] Priority low";
        value 1;
      }
      enum POE_PRIORITY_LEVEL_TYPE_MEDIUM {
        description "[Medium] Priority medium";
        value 2;
      }
      enum POE_PRIORITY_LEVEL_TYPE_HIGH {
        description "[High] Priority high";
        value 3;
      }
    }
  }
  typedef PoEPortModeTypeOptions {
    type enumeration {
      enum POE_PORT_MODE_TYPE_POE {
        description "[PoE] 802.3af PoE";
        value 0;
      }
      enum POE_PORT_MODE_TYPE_POE_PLUS {
        description "[PoE+] 802.3at PoE+";
        value 1;
      }
      enum POE_PORT_MODE_TYPE_POE_PLUS_PLUS {
        description "[PoE++] 802.3bt PoE++";
        value 2;
      }
      enum POE_PORT_MODE_TYPE_POE_LLDP {
        description "*[PoE LLDP Control] PoE mode is controlled by LLDP";
        value 3;
      }
    }
  }
  typedef PoEDeterminedClassTypeOptions {
    type enumeration {
      enum POE_DETERMINED_CLASS_TYPE_CLASS0 {
        description "[Class0] Class level 0";
        value 0;
      }
      enum POE_DETERMINED_CLASS_TYPE_CLASS1 {
        description "[Class1] Class level 1";
        value 1;
      }
      enum POE_DETERMINED_CLASS_TYPE_CLASS2 {
        description "[Class2] Class level 2";
        value 2;
      }
      enum POE_DETERMINED_CLASS_TYPE_CLASS3 {
        description "[Class3] Class level 3";
        value 3;
      }
      enum POE_DETERMINED_CLASS_TYPE_CLASS4 {
        description "[Class4] Class level 4";
        value 4;
      }
      enum POE_DETERMINED_CLASS_TYPE_CLASS5 {
        description "[Class5] Class level 5";
        value 5;
      }
      enum POE_DETERMINED_CLASS_TYPE_CLASS6 {
        description "[Class6] Class level 6";
        value 6;
      }
      enum POE_DETERMINED_CLASS_TYPE_CLASS7 {
        description "[Class7] Class level 7";
        value 7;
      }
      enum POE_DETERMINED_CLASS_TYPE_CLASS8 {
        description "[Class8] Class level 8";
        value 8;
      }
      enum POE_DETERMINED_CLASS_TYPE_OVERLOAD {
        description "[Overload] Overload";
        value 9;
      }
      enum POE_DETERMINED_CLASS_TYPE_PROBES_NOT_EQUAL {
        description "[Probes Not Equal] Probes not equal";
        value 10;
      }
      enum POE_DETERMINED_CLASS_TYPE_UNKNOWN {
        description "[Unknown] Unknown";
        value 11;
      }
    }
  }
  typedef PoEConditionTypeOptions {
    type enumeration {
      enum POE_CONDITION_TYPE_DISABLED {
        description "[Disabled] Disabled";
        value 0;
      }
      enum POE_CONDITION_TYPE_POWER_OFF {
        description "[Power Off] Power off";
        value 1;
      }
      enum POE_CONDITION_TYPE_DTYPECOVERING {
        description "[Dtypecovering] Dtypecovering";
        value 2;
      }
      enum POE_CONDITION_TYPE_POWERED {
        description "[Powered] Powered";
        value 3;
      }
      enum POE_CONDITION_TYPE_CLASS_MTYPEMATCH {
        description "[Class Mtypematch] Class mtypematch";
        value 4;
      }
      enum POE_CONDITION_TYPE_SHORT_CIRCUIT {
        description "[Short Circuit] Short circuit";
        value 5;
      }
      enum POE_CONDITION_TYPE_REJECTED {
        description "[Rejected] Rejected";
        value 6;
      }
      enum POE_CONDITION_TYPE_OVERLOAD {
        description "[Overload] Overload";
        value 7;
      }
      enum POE_CONDITION_TYPE_UNDERLOAD {
        description "[Underload] Underload";
        value 8;
      }
      enum POE_CONDITION_TYPE_OVER_TEMP {
        description "[Over Temperature] Over temperature";
        value 9;
      }
      enum POE_CONDITION_TYPE_VOLTAGE_TOO_LOW {
        description "[Voltage Too Low] Voltage too low";
        value 10;
      }
      enum POE_CONDITION_TYPE_VOLTAGE_TOO_HIGH {
        description "[Voltage Too High] Voltage too high";
        value 11;
      }
      enum POE_CONDITION_TYPE_UNKNOW_ERROR {
        description "[Unknow Error] Unknow error";
        value 12;
      }
      enum POE_CONDITION_TYPE_BUDGET_EXCEEDED {
        description "[Budget Exceeded] Budget exceeded";
        value 13;
      }
      enum POE_CONDITION_TYPE_TYPE_NON_STANDARD_PD {
        description "[None Standard PD Type] None standard PD type";
        value 14;
      }
    }
  }
  typedef GPSStatusTypeOptions {
    type enumeration {
      enum GPS_STATUS_TYPE_DISABLED {
        description "[Disabled] Disabled";
        value 0;
      }
      enum GPS_STATUS_TYPE_TRACKING {
        description "[Tracking] Tracking";
        value 1;
      }
      enum GPS_STATUS_TYPE_SYNC {
        description "[Sync] Sync";
        value 2;
      }
    }
  }
  typedef DLDPAuthCationModeTypeOptions {
    type enumeration {
      enum DLDP_AUTHCATION_MODE_TYPE_NONE {
        description "";
        value 0;
      }
      enum DLDP_AUTHCATION_MODE_TYPE_PLAINTEXT {
        description "";
        value 1;
      }
      enum DLDP_AUTHCATION_MODE_TYPE_MD5 {
        description "";
        value 2;
      }
    }
  }
  typedef ShutdownModeTypeOptions {
    type enumeration {
      enum SHUT_MODE_TYPE_AUTO {
        description "";
        value 0;
      }
      enum SHUT_MODE_TYPE_MANUAL {
        description "";
        value 1;
      }
    }
  }
  typedef DLDPWorkModeTypeOptions {
    type enumeration {
      enum DLDP_WORK_MODE_TYPE_NORMAL {
        description "";
        value 0;
      }
      enum DLDP_WORK_MODE_TYPE_ENHANCE {
        description "";
        value 1;
      }
    }
  }
  typedef DLDPNeighobrStateTypeOptions {
    type enumeration {
      enum DLDP_NEIGHBOR_STATE_TYPE_UNCONFIRM {
        description "";
        value 0;
      }
      enum DLDP_NEIGHBOR_STATE_TYPE_CONFIRM {
        description "";
        value 1;
      }
    }
  }
  typedef DLDPProtocolStateTypeOptions {
    type enumeration {
      enum DLDP_PROTOCOL_STATE_TYPE_INITAL {
        description "";
        value 0;
      }
      enum DLDP_PROTOCOL_STATE_TYPE_INACTIVE {
        description "";
        value 1;
      }
      enum DLDP_PROTOCOL_STATE_TYPE_ACTIVE {
        description "";
        value 2;
      }
      enum DLDP_PROTOCOL_STATE_TYPE_ADVERTISEMENT {
        description "";
        value 3;
      }
      enum DLDP_PROTOCOL_STATE_TYPE_PROBE {
        description "";
        value 4;
      }
      enum DLDP_PROTOCOL_STATE_TYPE_DISABLE {
        description "";
        value 5;
      }
      enum DLDP_PROTOCOL_STATE_TYPE_DELAY_DOWN {
        description "";
        value 6;
      }
    }
  }
  typedef PowerRedundantTypeOptions {
    type enumeration {
      enum POWER_REDUNDANT_TYPE_A {
        description "[PSU A]";
        value 0;
      }
      enum POWER_REDUNDANT_TYPE_B {
        description "[PSU B]";
        value 1;
      }
    }
  }
  grouping IPv4Static {
    leaf IPAddress {
      type string;
    }
    leaf SubnetMask {
      type string;
    }
  }
  grouping DLDPConfig {
    container System {
      uses DLDPSystemConfig;
    }
    container Port {
      uses DLDPPortConfig;
    }
  }
  grouping DLDPSystemConfig {
    leaf Enabled {
      type boolean;
    }
    leaf AdvertisementInterval {
      type int32;
    }
    leaf ShutDownMode {
      type ShutdownModeTypeOptions;
    }
    leaf AuthMode {
      type DLDPAuthCationModeTypeOptions;
    }
    leaf WorkMode {
      type DLDPWorkModeTypeOptions;
    }
  }
  grouping DLDPPortConfig {
    container List {
      list List_Entry {
        uses DLDPPortConfigEntry;
      }
    }
  }
  grouping DLDPPortConfigEntry {
    container IdentifyNo {
      uses intri-device:InterfaceIdentify;
    }
    leaf Enabled {
      type boolean;
    }
  }
  grouping DLDPPortStatus {
    container List {
      uses DLDPPortStatusEntry;
    }
  }
  grouping DLDPPortStatusEntry {
    container IdentifyNo {
      uses intri-device:InterfaceIdentify;
    }
    leaf Enabled {
      type boolean;
    }
    leaf State {
      type DLDPProtocolStateTypeOptions;
    }
    leaf Link {
      type boolean;
    }
  }
  grouping DLDPNeighborEntry {
    leaf NeighborMACAddress {
      type string;
    }
    leaf PortNo {
      type int32;
    }
    leaf NeighborAgetime {
      type int32;
    }
    leaf NeighborState {
      type DLDPNeighobrStateTypeOptions;
    }
  }
  grouping EnableRequest {
    container List {
      list List_Entry {
        uses EnableRequestEntry;
      }
    }
  }
  grouping EnableRequestEntry {
    container IdentifyNo {
      uses intri-device:InterfaceIdentify;
    }
    leaf Enabled {
      type boolean;
    }
  }
  grouping PortLED {
    container List {
      list List_Entry {
        uses PortLEDEntry;
      }
    }
  }
  grouping PortLEDEntry {
    container IdentifyNo {
      uses intri-device:InterfaceIdentify;
    }
    leaf State {
      type LEDBehaviorModeTypeOptions;
    }
  }
  grouping BoardLED {
    leaf Power {
      type LEDBehaviorModeTypeOptions;
    }
    leaf System {
      type LEDBehaviorModeTypeOptions;
    }
    leaf PoEMax {
      type LEDBehaviorModeTypeOptions;
    }
    leaf Fan {
      type LEDBehaviorModeTypeOptions;
    }
    leaf GPS {
      type LEDBehaviorModeTypeOptions;
    }
  }
  grouping LEDStatus {
    container PortLED {
      uses PortLED;
    }
    container SystemLED {
      uses BoardLED;
    }
  }
  grouping Coordinates {
    leaf Latitude {
      type string;
    }
    leaf Longitude {
      type string;
    }
  }
  grouping GNSSVerboseInfomation {
    leaf Mode {
      type string;
    }
    leaf NavigationalStatus {
      type string;
    }
    leaf Speed {
      type decimal64 {
        fraction-digits 2;
      }
    }
    leaf Course {
      type decimal64 {
        fraction-digits 2;
      }
    }
    leaf MagneticVariation {
      type decimal64 {
        fraction-digits 2;
      }
    }
  }
  grouping GPSEnable {
    leaf Enabled {
      type boolean;
    }
  }
  grouping GPSStatus {
    leaf Enabled {
      type boolean;
    }
    leaf Status {
      type GPSStatusTypeOptions;
    }
    container VerboseInfo {
      uses GNSSVerboseInfomation;
    }
    container Location {
      uses Coordinates;
    }
    container DateTime {
      uses intri-timestamp:Timestamp;
    }
  }
  grouping GPSCommand {
    leaf Request {
      type string;
    }
    container Respond {
      leaf-list Respond_Entry {
        type string;
      }
    }
  }
  grouping USBStatus {
    leaf Enabled {
      type boolean;
    }
    leaf Connected {
      type boolean;
    }
    leaf ConnectedDevice {
      type string;
    }
  }
  grouping USBEthernetConfig {
    container Static {
      uses IPv4Static;
    }
  }
  grouping FanSpeedConfig {
    container List {
      list List_Entry {
        uses FanSpeedConfigEntry;
      }
    }
  }
  grouping FanSpeedConfigEntry {
    leaf FanNo {
      type int32;
    }
    leaf RotatingSpeed {
      type int32;
    }
  }
  grouping FanStatus {
    container List {
      list List_Entry {
        uses FanStatusEntry;
      }
    }
  }
  grouping FanStatusEntry {
    leaf FanNo {
      type int32;
    }
    leaf RotatingSpeedRPM {
      type int32;
    }
  }
  grouping TemperatureStatus {
    container List {
      list List_Entry {
        uses TemperatureStatusEntry;
      }
    }
  }
  grouping TemperatureStatusEntry {
    leaf Name {
      type string;
    }
    leaf ID {
      type int32;
    }
    leaf Temperature {
      type int32;
    }
  }
  grouping PowerRedundantState {
    container RedundantList {
      list RedundantList_Entry {
        uses PowerRedundantStateEntry;
      }
    }
  }
  grouping PowerRedundantStateEntry {
    leaf PwOption {
      type PowerRedundantTypeOptions;
    }
    leaf PowerRedundantPlugIn {
      type boolean;
    }
    leaf PowerRedundantACOk {
      type boolean;
    }
    leaf PowerRedundantOk {
      type boolean;
    }
    leaf PowerRedundantVoltage {
      type decimal64 {
        fraction-digits 2;
      }
    }
    leaf PowerRedundantCurrent {
      type decimal64 {
        fraction-digits 2;
      }
    }
    leaf PowerRedundantPowerConsumption {
      type decimal64 {
        fraction-digits 2;
      }
    }
    leaf PowerRedundantTemperature {
      type decimal64 {
        fraction-digits 2;
      }
    }
  }
  grouping PowerGeneralState {
    leaf Power_12V {
      type boolean;
    }
    leaf Power_54V {
      type boolean;
    }
  }
  grouping PowerState {
    leaf Type {
      type PowerTypeOptions;
    }
    choice PowerType {
      container PowerRedundantState {
        uses PowerRedundantState;
      }
      container PowerGeneralState {
        uses PowerGeneralState;
      }
    }
  }
  grouping TimeControlRegister {
    leaf RegBase {
      type int32;
    }
    leaf Offset {
      type int32;
    }
    leaf Data {
      type uint8;
    }
  }
  grouping Config {
    container LED {
      uses LEDConfig;
    }
    container Fan {
      uses FanSpeedConfig;
    }
    container GPS {
      uses GPSEnable;
    }
  }
  grouping Ports {
    container List {
      list List_Entry {
        uses PortEntry;
      }
    }
  }
  grouping PortEntry {
    container IdentifyNo {
      uses intri-device:InterfaceIdentify;
    }
    leaf HardwarePortNo {
      type int32;
    }
    leaf SwitchPortNo {
      type int32;
    }
    leaf InterfaceType {
      type intri-device:PortInterfaceTypeOptions;
    }
    container Properies {
      leaf-list Properies_Entry {
        type intri-device:PortPropertyTypeOptions;
      }
    }
    leaf SupportPoE {
      type boolean;
    }
    leaf SupportSFP {
      type boolean;
    }
    leaf LinkLED {
      type LEDBehaviorModeTypeOptions;
    }
    leaf PoELED {
      type LEDBehaviorModeTypeOptions;
    }
    leaf SpeedLED {
      type LEDBehaviorModeTypeOptions;
    }
  }
  grouping SystemInfo {
    container Fan {
      uses FanPercent;
    }
    container Temp {
      uses TemperatureStatus;
    }
    container BoardLED {
      uses BoardLED;
    }
    container GPS {
      uses GPSStatus;
    }
  }
  grouping LEDConfig {
    leaf Mode {
      type LEDModeTypeOptions;
    }
    leaf ResetButton {
      type boolean;
    }
  }
  grouping FanPercent {
    container List {
      list List_Entry {
        uses FanPercentEntry;
      }
    }
  }
  grouping FanPercentEntry {
    leaf FanNo {
      type int32;
    }
    leaf PercentRPM {
      type int32;
    }
  }
  grouping LEDType {
    leaf LED {
      type LEDBehaviorModeTypeOptions;
    }
  }
  grouping SignalState {
    container List {
      list List_Entry {
        uses SignalStateEntry;
      }
    }
  }
  grouping SignalStateEntry {
    container IdentifyNo {
      uses intri-device:InterfaceIdentify;
    }
    leaf State {
      type boolean;
    }
  }
  grouping SFPInfo {
    container List {
      list List_Entry {
        uses SFPInfoEntry;
      }
    }
  }
  grouping SFPInfoEntry {
    container IdentifyNo {
      uses intri-device:InterfaceIdentify;
    }
    container Info {
      uses intri-event:SFPInfo;
    }
  }
  grouping DeviceI2CAddress {
    container Bus0 {
      leaf-list Bus0_Entry {
        type string;
      }
    }
    leaf Mux {
      type string;
    }
    container List {
      list List_Entry {
        uses DeviceI2CAddressInfo;
      }
    }
  }
  grouping DeviceI2CAddressInfo {
    leaf Ch {
      type int32;
    }
    container Address {
      leaf-list Address_Entry {
        type string;
      }
    }
  }
  grouping InfoList {
    container Info {
      leaf-list Info_Entry {
        type string;
      }
    }
  }
  grouping Enable {
    leaf Enabled {
      type boolean;
    }
  }
  grouping Network {
    leaf IP {
      type string;
    }
    leaf Mask {
      type string;
    }
  }
  grouping MCUInfo {
    container List {
      list List_Entry {
        uses MCUVersion;
      }
    }
  }
  grouping MCUVersion {
    leaf Name {
      type string;
    }
    leaf Version {
      type string;
    }
  }
  grouping PoESetting {
    container List {
      list List_Entry {
        uses PoESettingEntry;
      }
    }
  }
  grouping PoESettingEntry {
    container IdentifyNo {
      uses intri-device:InterfaceIdentify;
    }
    leaf Enable {
      type boolean;
    }
    leaf Mode {
      type PoEPortModeTypeOptions;
    }
    leaf Priority {
      type PoEPriorityLevelTypeOptions;
    }
  }
  grouping PoEPortStatusList {
    container List {
      list List_Entry {
        uses PoEPortStatusEntry;
      }
    }
  }
  grouping PoEPortStatusEntry {
    container IdentifyNo {
      uses intri-device:InterfaceIdentify;
    }
    leaf IsEnabled {
      type boolean;
    }
    leaf IsLinkUp {
      type boolean;
    }
    leaf Class {
      type PoEDeterminedClassTypeOptions;
    }
    leaf PowerConsumption {
      type decimal64 {
        fraction-digits 2;
      }
    }
    leaf Current {
      type decimal64 {
        fraction-digits 2;
      }
    }
    leaf Voltage {
      type decimal64 {
        fraction-digits 2;
      }
    }
    leaf Temperature {
      type decimal64 {
        fraction-digits 2;
      }
    }
    leaf Condition {
      type PoEConditionTypeOptions;
    }
  }
  grouping PoESystemStatus {
    leaf MinShutDownVoltage {
      type decimal64 {
        fraction-digits 2;
      }
    }
    leaf MaxShutDownVoltage {
      type decimal64 {
        fraction-digits 2;
      }
    }
    leaf VMainVoltage {
      type decimal64 {
        fraction-digits 2;
      }
    }
    leaf IMainCurrent {
      type decimal64 {
        fraction-digits 2;
      }
    }
    leaf PowerConsumption {
      type decimal64 {
        fraction-digits 2;
      }
    }
    leaf Budget {
      type int32;
    }
    leaf Version {
      type string;
    }
  }
  grouping PoESystemBudgetEntry {
    leaf Budget {
      type int32;
    }
  }
  rpc intri-hardware-Hardware-GetSFPPlugin {
    input {
      uses intri-device:PortList;
    }
    output {
      uses SignalState;
    }
  }
  rpc intri-hardware-Hardware-GetSFPRxLoss {
    input {
      uses intri-device:PortList;
    }
    output {
      uses SignalState;
    }
  }
  rpc intri-hardware-Hardware-GetSFPTxFaild {
    input {
      uses intri-device:PortList;
    }
    output {
      uses SignalState;
    }
  }
  rpc intri-hardware-Hardware-GetSFPRom {
    input {
      uses intri-device:PortList;
    }
    output {
      uses SFPInfo;
    }
  }
  rpc intri-hardware-Hardware-GetSFPTxDisable {
    input {
      uses intri-device:PortList;
    }
    output {
      uses SignalState;
    }
  }
  rpc intri-hardware-Hardware-SetSFPTxDisable {
    input {
      uses EnableRequest;
    }
  }
  rpc intri-hardware-Hardware-GetSFPLED {
    input {
      uses intri-device:PortList;
    }
    output {
      uses PortLED;
    }
  }
  rpc intri-hardware-Hardware-SetSFPLED {
    input {
      uses PortLED;
    }
  }
  rpc intri-hardware-Hardware-GetResetButtonStatus {
    output {
      uses intri-common:State;
    }
  }
  rpc intri-hardware-Hardware-GetConfig {
    output {
      uses Config;
    }
  }
  rpc intri-hardware-Hardware-SetConfig {
    input {
      uses Config;
    }
  }
  rpc intri-hardware-Hardware-GetPortInfo {
    output {
      uses Ports;
    }
  }
  rpc intri-hardware-Hardware-GetTemperature {
    output {
      uses TemperatureStatus;
    }
  }
  rpc intri-hardware-Hardware-GetPowerStatus {
    output {
      uses PowerState;
    }
  }
  rpc intri-hardware-Hardware-GetGPS {
    output {
      uses GPSStatus;
    }
  }
  rpc intri-hardware-Hardware-SetGPS {
    input {
      uses Enable;
    }
  }
  rpc intri-hardware-Hardware-SetGPSCommand {
    input {
      uses GPSCommand;
    }
    output {
      uses GPSCommand;
    }
  }
  rpc intri-hardware-Hardware-GetSystemLED {
    output {
      uses LEDType;
    }
  }
  rpc intri-hardware-Hardware-SetSystemLED {
    input {
      uses LEDType;
    }
  }
  rpc intri-hardware-Hardware-SetFanSpeed {
    input {
      uses FanPercent;
    }
  }
  rpc intri-hardware-Hardware-GetFanSpeed {
    output {
      uses FanPercent;
    }
  }
  rpc intri-hardware-Hardware-SetGPSLED {
    input {
      uses LEDType;
    }
  }
  rpc intri-hardware-Hardware-GetGPSLED {
    output {
      uses LEDType;
    }
  }
  rpc intri-hardware-Hardware-SetFanLED {
    input {
      uses LEDType;
    }
  }
  rpc intri-hardware-Hardware-GetFanLED {
    output {
      uses LEDType;
    }
  }
  rpc intri-hardware-Hardware-SetUSBEnable {
    input {
      uses Enable;
    }
  }
  rpc intri-hardware-Hardware-GetUSBStatus {
    output {
      uses USBStatus;
    }
  }
  rpc intri-hardware-Hardware-SetHeater {
    input {
      uses Enable;
    }
  }
  rpc intri-hardware-Hardware-GetHeater {
    input {
      uses Enable;
    }
  }
  rpc intri-hardware-Hardware-GetMCUVersion {
    output {
      uses MCUInfo;
    }
  }
  rpc intri-hardware-Hardware-GetI2CDevice {
    output {
      uses DeviceI2CAddress;
    }
  }
  rpc intri-hardware-Hardware-GetCPU {
    output {
      uses InfoList;
    }
  }
  rpc intri-hardware-Hardware-GetMemoryTotal {
    output {
      uses InfoList;
    }
  }
  rpc intri-hardware-Hardware-RunMemoryTest {
    output {
      uses InfoList;
    }
  }
  rpc intri-hardware-Hardware-GetECCState {
    output {
      uses InfoList;
    }
  }
  rpc intri-hardware-Hardware-GetSPI {
    output {
      uses InfoList;
    }
  }
  rpc intri-hardware-Hardware-GetSPIPartition {
    output {
      uses InfoList;
    }
  }
  rpc intri-hardware-Hardware-GetSPIFlash {
    output {
      uses InfoList;
    }
  }
  rpc intri-hardware-Hardware-GeteMMC {
    output {
      uses InfoList;
    }
  }
  rpc intri-hardware-Hardware-GeteMMCPartition {
    output {
      uses InfoList;
    }
  }
  rpc intri-hardware-Hardware-SetWatchDog {
    input {
      uses Enable;
    }
  }
  rpc intri-hardware-Hardware-GetSecureICExist {
    output {
      uses InfoList;
    }
  }
  rpc intri-hardware-Hardware-RunSecureICVerify {
    output {
      uses InfoList;
    }
  }
  rpc intri-hardware-Hardware-GetRTC {
    output {
      uses intri-timestamp:Timestamp;
    }
  }
  rpc intri-hardware-Hardware-SetRTC {
    input {
      uses intri-timestamp:Timestamp;
    }
  }
  rpc intri-hardware-Hardware-RunSync {
  }
  rpc intri-hardware-Hardware-SetNetwork {
    input {
      uses Network;
    }
  }
  rpc intri-hardware-Hardware-GetNetwork {
    output {
      uses Network;
    }
  }
  rpc intri-hardware-Hardware-SetUSBNetwork {
    input {
      uses USBEthernetConfig;
    }
  }
  rpc intri-hardware-Hardware-GetUSBNetwork {
    output {
      uses USBEthernetConfig;
    }
  }
  rpc intri-hardware-Hardware-RunPing {
    input {
      uses Network;
    }
    output {
      uses InfoList;
    }
  }
  rpc intri-hardware-Hardware-RunProdMode {
  }
  rpc intri-hardware-Hardware-GetTimeControlRegister {
    input {
      uses TimeControlRegister;
    }
    output {
      uses TimeControlRegister;
    }
  }
  rpc intri-hardware-Hardware-SetTimeControlRegister {
    input {
      uses TimeControlRegister;
    }
  }
  rpc intri-hardware-HardwarePoE-SetSystemBudget {
    input {
      uses PoESystemBudgetEntry;
    }
  }
  rpc intri-hardware-HardwarePoE-SetPortSetting {
    input {
      uses PoESetting;
    }
  }
  rpc intri-hardware-HardwarePoE-GetPortSetting {
    output {
      uses PoESetting;
    }
  }
  rpc intri-hardware-HardwarePoE-GetSystemStatus {
    output {
      uses PoESystemStatus;
    }
  }
  rpc intri-hardware-HardwarePoE-GetPortStatus {
    output {
      uses PoEPortStatusList;
    }
  }
  rpc intri-hardware-HardwarePoE-SetPortLED {
    input {
      uses PortLED;
    }
  }
  rpc intri-hardware-HardwarePoE-GetPortLED {
    output {
      uses PortLED;
    }
  }
  rpc intri-hardware-HardwarePoE-GetPoEMaxLED {
    output {
      uses LEDType;
    }
  }
  rpc intri-hardware-HardwarePoE-SetPoEMaxLED {
    input {
      uses LEDType;
    }
  }
}
