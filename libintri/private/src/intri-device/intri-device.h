
#ifndef _H_intri_device
#define _H_intri_device
/* 
 * Copyright (c) 2008-2012, Andy Bierman, All Rights Reserved.
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *

*** Generated by yangdump 2.13-0

  Combined SIL header
  module intri-device
  revision 2022-06-14
  namespace intri:intri-device
  organization Intrising Inc.

 */

#include <libxml/xmlstring.h>

#include "dlq.h"
#include "ncxtypes.h"
#include "op.h"
#include "status.h"
#include "val.h"

#ifdef __cplusplus
extern "C" {
#endif

#define y_intri_device_M_intri_device (const xmlChar *)"intri-device"
#define y_intri_device_R_intri_device (const xmlChar *)"2022-06-14"

#define y_intri_device_N_BoardInfo_BoardDevice (const xmlChar *)"BoardInfo_BoardDevice"
#define y_intri_device_N_BoardInfo_CPUPort (const xmlChar *)"BoardInfo_CPUPort"
#define y_intri_device_N_BoardInfo_EnterpriseOID (const xmlChar *)"BoardInfo_EnterpriseOID"
#define y_intri_device_N_BoardInfo_HwFeatures (const xmlChar *)"BoardInfo_HwFeatures"
#define y_intri_device_N_BoardInfo_HwSize (const xmlChar *)"BoardInfo_HwSize"
#define y_intri_device_N_BoardInfo_PortLists (const xmlChar *)"BoardInfo_PortLists"
#define y_intri_device_N_BoardInfo_SystemDescription (const xmlChar *)"BoardInfo_SystemDescription"
#define y_intri_device_N_BoardInfo_TimeControl (const xmlChar *)"BoardInfo_TimeControl"
#define y_intri_device_N_Entry (const xmlChar *)"Entry"
#define y_intri_device_N_FanInfo_FANDevice (const xmlChar *)"FanInfo_FANDevice"
#define y_intri_device_N_FanInfo_FanNumber (const xmlChar *)"FanInfo_FanNumber"
#define y_intri_device_N_FanInfo_GPIODevice (const xmlChar *)"FanInfo_GPIODevice"
#define y_intri_device_N_FanInfo_I2CDevice (const xmlChar *)"FanInfo_I2CDevice"
#define y_intri_device_N_FanInfo_Name (const xmlChar *)"FanInfo_Name"
#define y_intri_device_N_FanInfo_Type (const xmlChar *)"FanInfo_Type"
#define y_intri_device_N_GPIODevice_Action (const xmlChar *)"GPIODevice_Action"
#define y_intri_device_N_GPIODevice_Enable (const xmlChar *)"GPIODevice_Enable"
#define y_intri_device_N_GPIODevice_Pin (const xmlChar *)"GPIODevice_Pin"
#define y_intri_device_N_GPIODevice_Register (const xmlChar *)"GPIODevice_Register"
#define y_intri_device_N_GPIOInfo_Device (const xmlChar *)"GPIOInfo_Device"
#define y_intri_device_N_GPIOInfo_Direction (const xmlChar *)"GPIOInfo_Direction"
#define y_intri_device_N_GPIOInfo_Name (const xmlChar *)"GPIOInfo_Name"
#define y_intri_device_N_GPSInfo_Direction (const xmlChar *)"GPSInfo_Direction"
#define y_intri_device_N_GPSInfo_Name (const xmlChar *)"GPSInfo_Name"
#define y_intri_device_N_GPSInfo_Path (const xmlChar *)"GPSInfo_Path"
#define y_intri_device_N_HardwareInfo_DeviceFan (const xmlChar *)"HardwareInfo_DeviceFan"
#define y_intri_device_N_HardwareInfo_DeviceGPS (const xmlChar *)"HardwareInfo_DeviceGPS"
#define y_intri_device_N_HardwareInfo_DeviceHW (const xmlChar *)"HardwareInfo_DeviceHW"
#define y_intri_device_N_HardwareInfo_DeviceHWMonitor (const xmlChar *)"HardwareInfo_DeviceHWMonitor"
#define y_intri_device_N_HardwareInfo_DeviceI2C (const xmlChar *)"HardwareInfo_DeviceI2C"
#define y_intri_device_N_HardwareInfo_DeviceLed (const xmlChar *)"HardwareInfo_DeviceLed"
#define y_intri_device_N_HardwareInfo_DevicePSU (const xmlChar *)"HardwareInfo_DevicePSU"
#define y_intri_device_N_HardwareInfo_DevicePTP (const xmlChar *)"HardwareInfo_DevicePTP"
#define y_intri_device_N_HardwareInfo_DevicePoE (const xmlChar *)"HardwareInfo_DevicePoE"
#define y_intri_device_N_HardwareInfo_DeviceToD (const xmlChar *)"HardwareInfo_DeviceToD"
#define y_intri_device_N_HardwareTableSize_ARPTableEntries (const xmlChar *)"HardwareTableSize_ARPTableEntries"
#define y_intri_device_N_HardwareTableSize_BridgeFDBEntries (const xmlChar *)"HardwareTableSize_BridgeFDBEntries"
#define y_intri_device_N_HardwareTableSize_CentralizedCounters (const xmlChar *)"HardwareTableSize_CentralizedCounters"
#define y_intri_device_N_HardwareTableSize_L2L3PortIsolation (const xmlChar *)"HardwareTableSize_L2L3PortIsolation"
#define y_intri_device_N_HardwareTableSize_MulticastLinkedListEntries (const xmlChar *)"HardwareTableSize_MulticastLinkedListEntries"
#define y_intri_device_N_HardwareTableSize_MulticastPhysicalPortGroups (const xmlChar *)"HardwareTableSize_MulticastPhysicalPortGroups"
#define y_intri_device_N_HardwareTableSize_QoSProfiles (const xmlChar *)"HardwareTableSize_QoSProfiles"
#define y_intri_device_N_HardwareTableSize_RouterIPv4HostEntries (const xmlChar *)"HardwareTableSize_RouterIPv4HostEntries"
#define y_intri_device_N_HardwareTableSize_RouterIPv6HostEntries (const xmlChar *)"HardwareTableSize_RouterIPv6HostEntries"
#define y_intri_device_N_HardwareTableSize_RouterNextHopEntries (const xmlChar *)"HardwareTableSize_RouterNextHopEntries"
#define y_intri_device_N_HardwareTableSize_SpanningTreeGroups (const xmlChar *)"HardwareTableSize_SpanningTreeGroups"
#define y_intri_device_N_HardwareTableSize_TcamSize (const xmlChar *)"HardwareTableSize_TcamSize"
#define y_intri_device_N_HardwareTableSize_VirtualBridgeDomains (const xmlChar *)"HardwareTableSize_VirtualBridgeDomains"
#define y_intri_device_N_HardwareTableSize_VirtualPorts (const xmlChar *)"HardwareTableSize_VirtualPorts"
#define y_intri_device_N_I2CDevice_Action (const xmlChar *)"I2CDevice_Action"
#define y_intri_device_N_I2CDevice_ActiveBit (const xmlChar *)"I2CDevice_ActiveBit"
#define y_intri_device_N_I2CDevice_AddrRegister (const xmlChar *)"I2CDevice_AddrRegister"
#define y_intri_device_N_I2CDevice_I2cAddr (const xmlChar *)"I2CDevice_I2cAddr"
#define y_intri_device_N_I2Cinfo_Device (const xmlChar *)"I2Cinfo_Device"
#define y_intri_device_N_I2Cinfo_Direction (const xmlChar *)"I2Cinfo_Direction"
#define y_intri_device_N_I2Cinfo_Name (const xmlChar *)"I2Cinfo_Name"
#define y_intri_device_N_Info_AltBuildDateTime (const xmlChar *)"Info_AltBuildDateTime"
#define y_intri_device_N_Info_AltSwVersion (const xmlChar *)"Info_AltSwVersion"
#define y_intri_device_N_Info_Board (const xmlChar *)"Info_Board"
#define y_intri_device_N_Info_CurrentBuildDateTime (const xmlChar *)"Info_CurrentBuildDateTime"
#define y_intri_device_N_Info_CurrentImage (const xmlChar *)"Info_CurrentImage"
#define y_intri_device_N_Info_CurrentSwVersion (const xmlChar *)"Info_CurrentSwVersion"
#define y_intri_device_N_Info_HwVersion (const xmlChar *)"Info_HwVersion"
#define y_intri_device_N_Info_Layer (const xmlChar *)"Info_Layer"
#define y_intri_device_N_Info_MACAddr (const xmlChar *)"Info_MACAddr"
#define y_intri_device_N_Info_MACAddrFactory (const xmlChar *)"Info_MACAddrFactory"
#define y_intri_device_N_Info_Model (const xmlChar *)"Info_Model"
#define y_intri_device_N_Info_SerialNo (const xmlChar *)"Info_SerialNo"
#define y_intri_device_N_Info_Vendor (const xmlChar *)"Info_Vendor"
#define y_intri_device_N_InterfaceIdentify_DeviceID (const xmlChar *)"InterfaceIdentify_DeviceID"
#define y_intri_device_N_InterfaceIdentify_LAGNo (const xmlChar *)"InterfaceIdentify_LAGNo"
#define y_intri_device_N_InterfaceIdentify_PortNo (const xmlChar *)"InterfaceIdentify_PortNo"
#define y_intri_device_N_InterfaceIdentify_Type (const xmlChar *)"InterfaceIdentify_Type"
#define y_intri_device_N_InterfaceIdentify_VlanID (const xmlChar *)"InterfaceIdentify_VlanID"
#define y_intri_device_N_LedInfo_Direction (const xmlChar *)"LedInfo_Direction"
#define y_intri_device_N_LedInfo_GPIODevice (const xmlChar *)"LedInfo_GPIODevice"
#define y_intri_device_N_LedInfo_I2CDevice (const xmlChar *)"LedInfo_I2CDevice"
#define y_intri_device_N_LedInfo_LEDDevice (const xmlChar *)"LedInfo_LEDDevice"
#define y_intri_device_N_LedInfo_Name (const xmlChar *)"LedInfo_Name"
#define y_intri_device_N_LedInfo_PortNo (const xmlChar *)"LedInfo_PortNo"
#define y_intri_device_N_LedInfo_Type (const xmlChar *)"LedInfo_Type"
#define y_intri_device_N_MCUFanDevice_ActiveBit (const xmlChar *)"MCUFanDevice_ActiveBit"
#define y_intri_device_N_MCUFanDevice_AddrRegister (const xmlChar *)"MCUFanDevice_AddrRegister"
#define y_intri_device_N_MCUFanDevice_FANAction (const xmlChar *)"MCUFanDevice_FANAction"
#define y_intri_device_N_MCUFanDevice_I2cAddr (const xmlChar *)"MCUFanDevice_I2cAddr"
#define y_intri_device_N_MCULedDevice_ActiveBit (const xmlChar *)"MCULedDevice_ActiveBit"
#define y_intri_device_N_MCULedDevice_AddrRegister (const xmlChar *)"MCULedDevice_AddrRegister"
#define y_intri_device_N_MCULedDevice_I2cAddr (const xmlChar *)"MCULedDevice_I2cAddr"
#define y_intri_device_N_MCULedDevice_LedAction (const xmlChar *)"MCULedDevice_LedAction"
#define y_intri_device_N_MCUMonitorDevice_ActiveBit (const xmlChar *)"MCUMonitorDevice_ActiveBit"
#define y_intri_device_N_MCUMonitorDevice_AddrRegister (const xmlChar *)"MCUMonitorDevice_AddrRegister"
#define y_intri_device_N_MCUMonitorDevice_I2cAddr (const xmlChar *)"MCUMonitorDevice_I2cAddr"
#define y_intri_device_N_MCUMonitorDevice_MonitorAction (const xmlChar *)"MCUMonitorDevice_MonitorAction"
#define y_intri_device_N_MCUPSUDevice_ActiveBit (const xmlChar *)"MCUPSUDevice_ActiveBit"
#define y_intri_device_N_MCUPSUDevice_AddrRegister (const xmlChar *)"MCUPSUDevice_AddrRegister"
#define y_intri_device_N_MCUPSUDevice_I2cAddr (const xmlChar *)"MCUPSUDevice_I2cAddr"
#define y_intri_device_N_MCUPSUDevice_PSUAction (const xmlChar *)"MCUPSUDevice_PSUAction"
#define y_intri_device_N_MonitorInfo_Direction (const xmlChar *)"MonitorInfo_Direction"
#define y_intri_device_N_MonitorInfo_GPIODevice (const xmlChar *)"MonitorInfo_GPIODevice"
#define y_intri_device_N_MonitorInfo_I2CDevice (const xmlChar *)"MonitorInfo_I2CDevice"
#define y_intri_device_N_MonitorInfo_MonitorDevice (const xmlChar *)"MonitorInfo_MonitorDevice"
#define y_intri_device_N_MonitorInfo_Name (const xmlChar *)"MonitorInfo_Name"
#define y_intri_device_N_MonitorInfo_Type (const xmlChar *)"MonitorInfo_Type"
#define y_intri_device_N_PSUInfo_Direction (const xmlChar *)"PSUInfo_Direction"
#define y_intri_device_N_PSUInfo_GPIODevice (const xmlChar *)"PSUInfo_GPIODevice"
#define y_intri_device_N_PSUInfo_I2CDevice (const xmlChar *)"PSUInfo_I2CDevice"
#define y_intri_device_N_PSUInfo_Name (const xmlChar *)"PSUInfo_Name"
#define y_intri_device_N_PSUInfo_PSUDevice (const xmlChar *)"PSUInfo_PSUDevice"
#define y_intri_device_N_PSUInfo_Type (const xmlChar *)"PSUInfo_Type"
#define y_intri_device_N_PTPClockSynchronizerInfo_Device (const xmlChar *)"PTPClockSynchronizerInfo_Device"
#define y_intri_device_N_PTPClockSynchronizerInfo_Direction (const xmlChar *)"PTPClockSynchronizerInfo_Direction"
#define y_intri_device_N_PTPClockSynchronizerInfo_Name (const xmlChar *)"PTPClockSynchronizerInfo_Name"
#define y_intri_device_N_PhyInterface_Interface (const xmlChar *)"PhyInterface_Interface"
#define y_intri_device_N_PhyInterface_Type (const xmlChar *)"PhyInterface_Type"
#define y_intri_device_N_PoEInfo_I2CDevice (const xmlChar *)"PoEInfo_I2CDevice"
#define y_intri_device_N_PoEInfo_Name (const xmlChar *)"PoEInfo_Name"
#define y_intri_device_N_PoEInfo_Type (const xmlChar *)"PoEInfo_Type"
#define y_intri_device_N_PoEInfo_UartDevice (const xmlChar *)"PoEInfo_UartDevice"
#define y_intri_device_N_PortInfo_DeviceID (const xmlChar *)"PortInfo_DeviceID"
#define y_intri_device_N_PortInfo_InterfaceType (const xmlChar *)"PortInfo_InterfaceType"
#define y_intri_device_N_PortInfo_MACChip (const xmlChar *)"PortInfo_MACChip"
#define y_intri_device_N_PortInfo_MACNo (const xmlChar *)"PortInfo_MACNo"
#define y_intri_device_N_PortInfo_MacsecEncLen (const xmlChar *)"PortInfo_MacsecEncLen"
#define y_intri_device_N_PortInfo_PhyID1 (const xmlChar *)"PortInfo_PhyID1"
#define y_intri_device_N_PortInfo_PhyID2 (const xmlChar *)"PortInfo_PhyID2"
#define y_intri_device_N_PortInfo_PhyInterface (const xmlChar *)"PortInfo_PhyInterface"
#define y_intri_device_N_PortInfo_PoEChannel (const xmlChar *)"PortInfo_PoEChannel"
#define y_intri_device_N_PortInfo_PoEChipNo (const xmlChar *)"PortInfo_PoEChipNo"
#define y_intri_device_N_PortInfo_PoENo (const xmlChar *)"PortInfo_PoENo"
#define y_intri_device_N_PortInfo_PortGroup (const xmlChar *)"PortInfo_PortGroup"
#define y_intri_device_N_PortInfo_PortNo (const xmlChar *)"PortInfo_PortNo"
#define y_intri_device_N_PortInfo_Properties (const xmlChar *)"PortInfo_Properties"
#define y_intri_device_N_PortInfo_SpeedProperties (const xmlChar *)"PortInfo_SpeedProperties"
#define y_intri_device_N_TimeControlInfo_InputClockMapping (const xmlChar *)"TimeControlInfo_InputClockMapping"
#define y_intri_device_N_TimeControlInfo_PortInfoList (const xmlChar *)"TimeControlInfo_PortInfoList"
#define y_intri_device_N_TimeControlInfo_SpeedFrequencyList (const xmlChar *)"TimeControlInfo_SpeedFrequencyList"
#define y_intri_device_N_TimeControlPortInfoEntry_Frequency (const xmlChar *)"TimeControlPortInfoEntry_Frequency"
#define y_intri_device_N_TimeControlPortInfoEntry_InputClock (const xmlChar *)"TimeControlPortInfoEntry_InputClock"
#define y_intri_device_N_TimeControlPortInfoEntry_PortNo (const xmlChar *)"TimeControlPortInfoEntry_PortNo"
#define y_intri_device_N_TimeControlPortInfoEntry_RCLKPin (const xmlChar *)"TimeControlPortInfoEntry_RCLKPin"
#define y_intri_device_N_TimeControlSpeedFrequencyEntry_Div (const xmlChar *)"TimeControlSpeedFrequencyEntry_Div"
#define y_intri_device_N_TimeControlSpeedFrequencyEntry_Frequency (const xmlChar *)"TimeControlSpeedFrequencyEntry_Frequency"
#define y_intri_device_N_TimeControlSpeedFrequencyEntry_M (const xmlChar *)"TimeControlSpeedFrequencyEntry_M"
#define y_intri_device_N_TimeControlSpeedFrequencyEntry_N (const xmlChar *)"TimeControlSpeedFrequencyEntry_N"
#define y_intri_device_N_TimeControlSpeedFrequencyEntry_Speed (const xmlChar *)"TimeControlSpeedFrequencyEntry_Speed"
#define y_intri_device_N_ToDInfo_Direction (const xmlChar *)"ToDInfo_Direction"
#define y_intri_device_N_ToDInfo_Name (const xmlChar *)"ToDInfo_Name"
#define y_intri_device_N_ToDInfo_Path (const xmlChar *)"ToDInfo_Path"
#define y_intri_device_N_UARTDevice_Bandwidth (const xmlChar *)"UARTDevice_Bandwidth"
#define y_intri_device_N_UARTDevice_Direction (const xmlChar *)"UARTDevice_Direction"
#define y_intri_device_N_UARTDevice_Name (const xmlChar *)"UARTDevice_Name"
#define y_intri_device_N_UARTDevice_Path (const xmlChar *)"UARTDevice_Path"
#define y_intri_device_N_board_info (const xmlChar *)"board-info"
#define y_intri_device_N_device_info (const xmlChar *)"device-info"
#define y_intri_device_N_hardware_info (const xmlChar *)"hardware-info"
#define y_intri_device_N_intri_device (const xmlChar *)"intri-device"
#define y_intri_device_N_lag_port_list (const xmlChar *)"lag-port-list"
#define y_intri_device_N_mac_addr (const xmlChar *)"mac-addr"
#define y_intri_device_N_name (const xmlChar *)"name"
#define y_intri_device_N_poe_port_list (const xmlChar *)"poe-port-list"
#define y_intri_device_N_port_list (const xmlChar *)"port-list"
#define y_intri_device_N_value (const xmlChar *)"value"

/* container /intri-device/mac-addr */
typedef struct y_intri_device_T_intri_device_mac_addr_ {
  xmlChar *mac_addr;
} y_intri_device_T_intri_device_mac_addr;

/* list /intri-device/port-list/Entry */
typedef struct y_intri_device_T_intri_device_port_list_Entry_ {
  dlq_hdr_t qhdr;
  xmlChar *InterfaceIdentify_Type;
  int32 InterfaceIdentify_DeviceID;
  int32 InterfaceIdentify_PortNo;
  int32 InterfaceIdentify_LAGNo;
  int32 InterfaceIdentify_VlanID;
} y_intri_device_T_intri_device_port_list_Entry;

/* container /intri-device/port-list */
typedef struct y_intri_device_T_intri_device_port_list_ {
  dlq_hdr_t Entry;
} y_intri_device_T_intri_device_port_list;

/* list /intri-device/lag-port-list/Entry */
typedef struct y_intri_device_T_intri_device_lag_port_list_Entry_ {
  dlq_hdr_t qhdr;
  xmlChar *InterfaceIdentify_Type;
  int32 InterfaceIdentify_DeviceID;
  int32 InterfaceIdentify_PortNo;
  int32 InterfaceIdentify_LAGNo;
  int32 InterfaceIdentify_VlanID;
} y_intri_device_T_intri_device_lag_port_list_Entry;

/* container /intri-device/lag-port-list */
typedef struct y_intri_device_T_intri_device_lag_port_list_ {
  dlq_hdr_t Entry;
} y_intri_device_T_intri_device_lag_port_list;

/* list /intri-device/poe-port-list/Entry */
typedef struct y_intri_device_T_intri_device_poe_port_list_Entry_ {
  dlq_hdr_t qhdr;
  xmlChar *InterfaceIdentify_Type;
  int32 InterfaceIdentify_DeviceID;
  int32 InterfaceIdentify_PortNo;
  int32 InterfaceIdentify_LAGNo;
  int32 InterfaceIdentify_VlanID;
} y_intri_device_T_intri_device_poe_port_list_Entry;

/* container /intri-device/poe-port-list */
typedef struct y_intri_device_T_intri_device_poe_port_list_ {
  dlq_hdr_t Entry;
} y_intri_device_T_intri_device_poe_port_list;

/* container /intri-device/device-info */
typedef struct y_intri_device_T_intri_device_device_info_ {
  xmlChar *Info_Model;
  xmlChar *Info_MACAddr;
  xmlChar *Info_MACAddrFactory;
  xmlChar *Info_SerialNo;
  xmlChar *Info_Vendor;
  xmlChar *Info_AltBuildDateTime;
  xmlChar *Info_CurrentBuildDateTime;
  xmlChar *Info_AltSwVersion;
  xmlChar *Info_CurrentSwVersion;
  xmlChar *Info_HwVersion;
  xmlChar *Info_CurrentImage;
  xmlChar *Info_Board;
  xmlChar *Info_Layer;
} y_intri_device_T_intri_device_device_info;

/* container /intri-device/board-info/BoardInfo_PortLists/Entry/PortInfo_PhyInterface */
typedef struct y_intri_device_T_intri_device_board_info_BoardInfo_PortLists_Entry_PortInfo_PhyInterface_ {
  int32 PhyInterface_Interface;
  xmlChar *PhyInterface_Type;
} y_intri_device_T_intri_device_board_info_BoardInfo_PortLists_Entry_PortInfo_PhyInterface;

/* leaf-list /intri-device/board-info/BoardInfo_PortLists/Entry/PortInfo_PoEChannel */
typedef struct y_intri_device_T_intri_device_board_info_BoardInfo_PortLists_Entry_PortInfo_PoEChannel_ {
  dlq_hdr_t qhdr;
  int32 PortInfo_PoEChannel;
} y_intri_device_T_intri_device_board_info_BoardInfo_PortLists_Entry_PortInfo_PoEChannel;

/* leaf-list /intri-device/board-info/BoardInfo_PortLists/Entry/PortInfo_Properties */
typedef struct y_intri_device_T_intri_device_board_info_BoardInfo_PortLists_Entry_PortInfo_Properties_ {
  dlq_hdr_t qhdr;
  xmlChar *PortInfo_Properties;
} y_intri_device_T_intri_device_board_info_BoardInfo_PortLists_Entry_PortInfo_Properties;

/* leaf-list /intri-device/board-info/BoardInfo_PortLists/Entry/PortInfo_SpeedProperties */
typedef struct y_intri_device_T_intri_device_board_info_BoardInfo_PortLists_Entry_PortInfo_SpeedProperties_ {
  dlq_hdr_t qhdr;
  xmlChar *PortInfo_SpeedProperties;
} y_intri_device_T_intri_device_board_info_BoardInfo_PortLists_Entry_PortInfo_SpeedProperties;

/* list /intri-device/board-info/BoardInfo_PortLists/Entry */
typedef struct y_intri_device_T_intri_device_board_info_BoardInfo_PortLists_Entry_ {
  dlq_hdr_t qhdr;
  int32 PortInfo_PortNo;
  int32 PortInfo_MACChip;
  int32 PortInfo_MACNo;
  int32 PortInfo_PortGroup;
  int32 PortInfo_PhyID1;
  int32 PortInfo_PhyID2;
  y_intri_device_T_intri_device_board_info_BoardInfo_PortLists_Entry_PortInfo_PhyInterface PortInfo_PhyInterface;
  int32 PortInfo_PoENo;
  dlq_hdr_t PortInfo_PoEChannel;
  int32 PortInfo_PoEChipNo;
  int32 PortInfo_MacsecEncLen;
  xmlChar *PortInfo_InterfaceType;
  dlq_hdr_t PortInfo_Properties;
  int32 PortInfo_DeviceID;
  dlq_hdr_t PortInfo_SpeedProperties;
} y_intri_device_T_intri_device_board_info_BoardInfo_PortLists_Entry;

/* container /intri-device/board-info/BoardInfo_PortLists */
typedef struct y_intri_device_T_intri_device_board_info_BoardInfo_PortLists_ {
  dlq_hdr_t Entry;
} y_intri_device_T_intri_device_board_info_BoardInfo_PortLists;

/* container /intri-device/board-info/BoardInfo_HwSize */
typedef struct y_intri_device_T_intri_device_board_info_BoardInfo_HwSize_ {
  int32 HardwareTableSize_TcamSize;
  int32 HardwareTableSize_BridgeFDBEntries;
  int32 HardwareTableSize_VirtualPorts;
  int32 HardwareTableSize_VirtualBridgeDomains;
  int32 HardwareTableSize_ARPTableEntries;
  int32 HardwareTableSize_RouterIPv4HostEntries;
  int32 HardwareTableSize_RouterIPv6HostEntries;
  int32 HardwareTableSize_RouterNextHopEntries;
  int32 HardwareTableSize_MulticastPhysicalPortGroups;
  int32 HardwareTableSize_MulticastLinkedListEntries;
  int32 HardwareTableSize_CentralizedCounters;
  int32 HardwareTableSize_SpanningTreeGroups;
  int32 HardwareTableSize_QoSProfiles;
  int32 HardwareTableSize_L2L3PortIsolation;
} y_intri_device_T_intri_device_board_info_BoardInfo_HwSize;

/* container /intri-device/board-info/BoardInfo_BoardDevice/HardwareInfo_DeviceLed/LedInfo_LEDDevice */
typedef struct y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DeviceLed_LedInfo_LEDDevice_ {
  int32 MCULedDevice_I2cAddr;
  int32 MCULedDevice_AddrRegister;
  xmlChar *MCULedDevice_LedAction;
  int32 MCULedDevice_ActiveBit;
} y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DeviceLed_LedInfo_LEDDevice;

/* container /intri-device/board-info/BoardInfo_BoardDevice/HardwareInfo_DeviceLed/LedInfo_I2CDevice */
typedef struct y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DeviceLed_LedInfo_I2CDevice_ {
  int32 I2CDevice_I2cAddr;
  int32 I2CDevice_AddrRegister;
  int32 I2CDevice_Action;
  int32 I2CDevice_ActiveBit;
} y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DeviceLed_LedInfo_I2CDevice;

/* container /intri-device/board-info/BoardInfo_BoardDevice/HardwareInfo_DeviceLed/LedInfo_GPIODevice */
typedef struct y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DeviceLed_LedInfo_GPIODevice_ {
  int32 GPIODevice_Register;
  int32 GPIODevice_Pin;
  boolean GPIODevice_Action;
  boolean GPIODevice_Enable;
} y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DeviceLed_LedInfo_GPIODevice;

/* container /intri-device/board-info/BoardInfo_BoardDevice/HardwareInfo_DeviceLed */
typedef struct y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DeviceLed_ {
  xmlChar *LedInfo_Name;
  int32 LedInfo_PortNo;
  xmlChar *LedInfo_Type;
  xmlChar *LedInfo_Direction;
  y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DeviceLed_LedInfo_LEDDevice LedInfo_LEDDevice;
  y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DeviceLed_LedInfo_I2CDevice LedInfo_I2CDevice;
  y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DeviceLed_LedInfo_GPIODevice LedInfo_GPIODevice;
} y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DeviceLed;

/* container /intri-device/board-info/BoardInfo_BoardDevice/HardwareInfo_DeviceHWMonitor/MonitorInfo_MonitorDevice */
typedef struct y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DeviceHWMonitor_MonitorInfo_MonitorDevice_ {
  int32 MCUMonitorDevice_I2cAddr;
  int32 MCUMonitorDevice_AddrRegister;
  xmlChar *MCUMonitorDevice_MonitorAction;
  int32 MCUMonitorDevice_ActiveBit;
} y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DeviceHWMonitor_MonitorInfo_MonitorDevice;

/* container /intri-device/board-info/BoardInfo_BoardDevice/HardwareInfo_DeviceHWMonitor/MonitorInfo_I2CDevice */
typedef struct y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DeviceHWMonitor_MonitorInfo_I2CDevice_ {
  int32 I2CDevice_I2cAddr;
  int32 I2CDevice_AddrRegister;
  int32 I2CDevice_Action;
  int32 I2CDevice_ActiveBit;
} y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DeviceHWMonitor_MonitorInfo_I2CDevice;

/* container /intri-device/board-info/BoardInfo_BoardDevice/HardwareInfo_DeviceHWMonitor/MonitorInfo_GPIODevice */
typedef struct y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DeviceHWMonitor_MonitorInfo_GPIODevice_ {
  int32 GPIODevice_Register;
  int32 GPIODevice_Pin;
  boolean GPIODevice_Action;
  boolean GPIODevice_Enable;
} y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DeviceHWMonitor_MonitorInfo_GPIODevice;

/* container /intri-device/board-info/BoardInfo_BoardDevice/HardwareInfo_DeviceHWMonitor */
typedef struct y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DeviceHWMonitor_ {
  xmlChar *MonitorInfo_Name;
  xmlChar *MonitorInfo_Type;
  xmlChar *MonitorInfo_Direction;
  y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DeviceHWMonitor_MonitorInfo_MonitorDevice MonitorInfo_MonitorDevice;
  y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DeviceHWMonitor_MonitorInfo_I2CDevice MonitorInfo_I2CDevice;
  y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DeviceHWMonitor_MonitorInfo_GPIODevice MonitorInfo_GPIODevice;
} y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DeviceHWMonitor;

/* container /intri-device/board-info/BoardInfo_BoardDevice/HardwareInfo_DevicePSU/PSUInfo_PSUDevice */
typedef struct y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DevicePSU_PSUInfo_PSUDevice_ {
  int32 MCUPSUDevice_I2cAddr;
  int32 MCUPSUDevice_AddrRegister;
  xmlChar *MCUPSUDevice_PSUAction;
  int32 MCUPSUDevice_ActiveBit;
} y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DevicePSU_PSUInfo_PSUDevice;

/* container /intri-device/board-info/BoardInfo_BoardDevice/HardwareInfo_DevicePSU/PSUInfo_I2CDevice */
typedef struct y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DevicePSU_PSUInfo_I2CDevice_ {
  int32 I2CDevice_I2cAddr;
  int32 I2CDevice_AddrRegister;
  int32 I2CDevice_Action;
  int32 I2CDevice_ActiveBit;
} y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DevicePSU_PSUInfo_I2CDevice;

/* container /intri-device/board-info/BoardInfo_BoardDevice/HardwareInfo_DevicePSU/PSUInfo_GPIODevice */
typedef struct y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DevicePSU_PSUInfo_GPIODevice_ {
  int32 GPIODevice_Register;
  int32 GPIODevice_Pin;
  boolean GPIODevice_Action;
  boolean GPIODevice_Enable;
} y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DevicePSU_PSUInfo_GPIODevice;

/* container /intri-device/board-info/BoardInfo_BoardDevice/HardwareInfo_DevicePSU */
typedef struct y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DevicePSU_ {
  xmlChar *PSUInfo_Name;
  xmlChar *PSUInfo_Type;
  xmlChar *PSUInfo_Direction;
  y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DevicePSU_PSUInfo_PSUDevice PSUInfo_PSUDevice;
  y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DevicePSU_PSUInfo_I2CDevice PSUInfo_I2CDevice;
  y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DevicePSU_PSUInfo_GPIODevice PSUInfo_GPIODevice;
} y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DevicePSU;

/* container /intri-device/board-info/BoardInfo_BoardDevice/HardwareInfo_DeviceI2C/I2Cinfo_Device */
typedef struct y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DeviceI2C_I2Cinfo_Device_ {
  int32 I2CDevice_I2cAddr;
  int32 I2CDevice_AddrRegister;
  int32 I2CDevice_Action;
  int32 I2CDevice_ActiveBit;
} y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DeviceI2C_I2Cinfo_Device;

/* container /intri-device/board-info/BoardInfo_BoardDevice/HardwareInfo_DeviceI2C */
typedef struct y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DeviceI2C_ {
  xmlChar *I2Cinfo_Name;
  xmlChar *I2Cinfo_Direction;
  y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DeviceI2C_I2Cinfo_Device I2Cinfo_Device;
} y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DeviceI2C;

/* container /intri-device/board-info/BoardInfo_BoardDevice/HardwareInfo_DeviceHW/GPIOInfo_Device */
typedef struct y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DeviceHW_GPIOInfo_Device_ {
  int32 GPIODevice_Register;
  int32 GPIODevice_Pin;
  boolean GPIODevice_Action;
  boolean GPIODevice_Enable;
} y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DeviceHW_GPIOInfo_Device;

/* container /intri-device/board-info/BoardInfo_BoardDevice/HardwareInfo_DeviceHW */
typedef struct y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DeviceHW_ {
  xmlChar *GPIOInfo_Name;
  xmlChar *GPIOInfo_Direction;
  y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DeviceHW_GPIOInfo_Device GPIOInfo_Device;
} y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DeviceHW;

/* container /intri-device/board-info/BoardInfo_BoardDevice/HardwareInfo_DevicePTP/PTPClockSynchronizerInfo_Device */
typedef struct y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DevicePTP_PTPClockSynchronizerInfo_Device_ {
  int32 I2CDevice_I2cAddr;
  int32 I2CDevice_AddrRegister;
  int32 I2CDevice_Action;
  int32 I2CDevice_ActiveBit;
} y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DevicePTP_PTPClockSynchronizerInfo_Device;

/* container /intri-device/board-info/BoardInfo_BoardDevice/HardwareInfo_DevicePTP */
typedef struct y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DevicePTP_ {
  xmlChar *PTPClockSynchronizerInfo_Name;
  xmlChar *PTPClockSynchronizerInfo_Direction;
  y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DevicePTP_PTPClockSynchronizerInfo_Device PTPClockSynchronizerInfo_Device;
} y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DevicePTP;

/* container /intri-device/board-info/BoardInfo_BoardDevice/HardwareInfo_DeviceGPS */
typedef struct y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DeviceGPS_ {
  xmlChar *GPSInfo_Name;
  xmlChar *GPSInfo_Path;
  xmlChar *GPSInfo_Direction;
} y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DeviceGPS;

/* container /intri-device/board-info/BoardInfo_BoardDevice/HardwareInfo_DeviceToD */
typedef struct y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DeviceToD_ {
  xmlChar *ToDInfo_Name;
  xmlChar *ToDInfo_Path;
  xmlChar *ToDInfo_Direction;
} y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DeviceToD;

/* container /intri-device/board-info/BoardInfo_BoardDevice/HardwareInfo_DeviceFan/FanInfo_FANDevice */
typedef struct y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DeviceFan_FanInfo_FANDevice_ {
  int32 MCUFanDevice_I2cAddr;
  int32 MCUFanDevice_AddrRegister;
  xmlChar *MCUFanDevice_FANAction;
  int32 MCUFanDevice_ActiveBit;
} y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DeviceFan_FanInfo_FANDevice;

/* container /intri-device/board-info/BoardInfo_BoardDevice/HardwareInfo_DeviceFan/FanInfo_I2CDevice */
typedef struct y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DeviceFan_FanInfo_I2CDevice_ {
  int32 I2CDevice_I2cAddr;
  int32 I2CDevice_AddrRegister;
  int32 I2CDevice_Action;
  int32 I2CDevice_ActiveBit;
} y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DeviceFan_FanInfo_I2CDevice;

/* container /intri-device/board-info/BoardInfo_BoardDevice/HardwareInfo_DeviceFan/FanInfo_GPIODevice */
typedef struct y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DeviceFan_FanInfo_GPIODevice_ {
  int32 GPIODevice_Register;
  int32 GPIODevice_Pin;
  boolean GPIODevice_Action;
  boolean GPIODevice_Enable;
} y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DeviceFan_FanInfo_GPIODevice;

/* container /intri-device/board-info/BoardInfo_BoardDevice/HardwareInfo_DeviceFan */
typedef struct y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DeviceFan_ {
  xmlChar *FanInfo_Name;
  xmlChar *FanInfo_Type;
  int32 FanInfo_FanNumber;
  y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DeviceFan_FanInfo_FANDevice FanInfo_FANDevice;
  y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DeviceFan_FanInfo_I2CDevice FanInfo_I2CDevice;
  y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DeviceFan_FanInfo_GPIODevice FanInfo_GPIODevice;
} y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DeviceFan;

/* container /intri-device/board-info/BoardInfo_BoardDevice/HardwareInfo_DevicePoE/PoEInfo_I2CDevice */
typedef struct y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DevicePoE_PoEInfo_I2CDevice_ {
  int32 I2CDevice_I2cAddr;
  int32 I2CDevice_AddrRegister;
  int32 I2CDevice_Action;
  int32 I2CDevice_ActiveBit;
} y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DevicePoE_PoEInfo_I2CDevice;

/* container /intri-device/board-info/BoardInfo_BoardDevice/HardwareInfo_DevicePoE/PoEInfo_UartDevice */
typedef struct y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DevicePoE_PoEInfo_UartDevice_ {
  xmlChar *UARTDevice_Name;
  xmlChar *UARTDevice_Path;
  xmlChar *UARTDevice_Direction;
  int32 UARTDevice_Bandwidth;
} y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DevicePoE_PoEInfo_UartDevice;

/* container /intri-device/board-info/BoardInfo_BoardDevice/HardwareInfo_DevicePoE */
typedef struct y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DevicePoE_ {
  xmlChar *PoEInfo_Name;
  xmlChar *PoEInfo_Type;
  y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DevicePoE_PoEInfo_I2CDevice PoEInfo_I2CDevice;
  y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DevicePoE_PoEInfo_UartDevice PoEInfo_UartDevice;
} y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DevicePoE;

/* container /intri-device/board-info/BoardInfo_BoardDevice */
typedef struct y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_ {
  y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DeviceLed HardwareInfo_DeviceLed;
  y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DeviceHWMonitor HardwareInfo_DeviceHWMonitor;
  y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DevicePSU HardwareInfo_DevicePSU;
  y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DeviceI2C HardwareInfo_DeviceI2C;
  y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DeviceHW HardwareInfo_DeviceHW;
  y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DevicePTP HardwareInfo_DevicePTP;
  y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DeviceGPS HardwareInfo_DeviceGPS;
  y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DeviceToD HardwareInfo_DeviceToD;
  y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DeviceFan HardwareInfo_DeviceFan;
  y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice_HardwareInfo_DevicePoE HardwareInfo_DevicePoE;
} y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice;

/* list /intri-device/board-info/BoardInfo_TimeControl/TimeControlInfo_InputClockMapping */
typedef struct y_intri_device_T_intri_device_board_info_BoardInfo_TimeControl_TimeControlInfo_InputClockMapping_ {
  dlq_hdr_t qhdr;
  xmlChar *name;
  xmlChar *value;
} y_intri_device_T_intri_device_board_info_BoardInfo_TimeControl_TimeControlInfo_InputClockMapping;

/* container /intri-device/board-info/BoardInfo_TimeControl/TimeControlInfo_PortInfoList */
typedef struct y_intri_device_T_intri_device_board_info_BoardInfo_TimeControl_TimeControlInfo_PortInfoList_ {
  int32 TimeControlPortInfoEntry_PortNo;
  xmlChar *TimeControlPortInfoEntry_RCLKPin;
  int64 TimeControlPortInfoEntry_Frequency;
  xmlChar *TimeControlPortInfoEntry_InputClock;
} y_intri_device_T_intri_device_board_info_BoardInfo_TimeControl_TimeControlInfo_PortInfoList;

/* container /intri-device/board-info/BoardInfo_TimeControl/TimeControlInfo_SpeedFrequencyList */
typedef struct y_intri_device_T_intri_device_board_info_BoardInfo_TimeControl_TimeControlInfo_SpeedFrequencyList_ {
  xmlChar *TimeControlSpeedFrequencyEntry_Speed;
  int64 TimeControlSpeedFrequencyEntry_Frequency;
  int64 TimeControlSpeedFrequencyEntry_M;
  int64 TimeControlSpeedFrequencyEntry_N;
  int64 TimeControlSpeedFrequencyEntry_Div;
} y_intri_device_T_intri_device_board_info_BoardInfo_TimeControl_TimeControlInfo_SpeedFrequencyList;

/* container /intri-device/board-info/BoardInfo_TimeControl */
typedef struct y_intri_device_T_intri_device_board_info_BoardInfo_TimeControl_ {
  dlq_hdr_t TimeControlInfo_InputClockMapping;
  y_intri_device_T_intri_device_board_info_BoardInfo_TimeControl_TimeControlInfo_PortInfoList TimeControlInfo_PortInfoList;
  y_intri_device_T_intri_device_board_info_BoardInfo_TimeControl_TimeControlInfo_SpeedFrequencyList TimeControlInfo_SpeedFrequencyList;
} y_intri_device_T_intri_device_board_info_BoardInfo_TimeControl;

/* container /intri-device/board-info */
typedef struct y_intri_device_T_intri_device_board_info_ {
  xmlChar *BoardInfo_SystemDescription;
  y_intri_device_T_intri_device_board_info_BoardInfo_PortLists BoardInfo_PortLists;
  xmlChar *BoardInfo_HwFeatures;
  y_intri_device_T_intri_device_board_info_BoardInfo_HwSize BoardInfo_HwSize;
  int32 BoardInfo_CPUPort;
  y_intri_device_T_intri_device_board_info_BoardInfo_BoardDevice BoardInfo_BoardDevice;
  y_intri_device_T_intri_device_board_info_BoardInfo_TimeControl BoardInfo_TimeControl;
  xmlChar *BoardInfo_EnterpriseOID;
} y_intri_device_T_intri_device_board_info;

/* container /intri-device/hardware-info/HardwareInfo_DeviceLed/LedInfo_LEDDevice */
typedef struct y_intri_device_T_intri_device_hardware_info_HardwareInfo_DeviceLed_LedInfo_LEDDevice_ {
  int32 MCULedDevice_I2cAddr;
  int32 MCULedDevice_AddrRegister;
  xmlChar *MCULedDevice_LedAction;
  int32 MCULedDevice_ActiveBit;
} y_intri_device_T_intri_device_hardware_info_HardwareInfo_DeviceLed_LedInfo_LEDDevice;

/* container /intri-device/hardware-info/HardwareInfo_DeviceLed/LedInfo_I2CDevice */
typedef struct y_intri_device_T_intri_device_hardware_info_HardwareInfo_DeviceLed_LedInfo_I2CDevice_ {
  int32 I2CDevice_I2cAddr;
  int32 I2CDevice_AddrRegister;
  int32 I2CDevice_Action;
  int32 I2CDevice_ActiveBit;
} y_intri_device_T_intri_device_hardware_info_HardwareInfo_DeviceLed_LedInfo_I2CDevice;

/* container /intri-device/hardware-info/HardwareInfo_DeviceLed/LedInfo_GPIODevice */
typedef struct y_intri_device_T_intri_device_hardware_info_HardwareInfo_DeviceLed_LedInfo_GPIODevice_ {
  int32 GPIODevice_Register;
  int32 GPIODevice_Pin;
  boolean GPIODevice_Action;
  boolean GPIODevice_Enable;
} y_intri_device_T_intri_device_hardware_info_HardwareInfo_DeviceLed_LedInfo_GPIODevice;

/* container /intri-device/hardware-info/HardwareInfo_DeviceLed */
typedef struct y_intri_device_T_intri_device_hardware_info_HardwareInfo_DeviceLed_ {
  xmlChar *LedInfo_Name;
  int32 LedInfo_PortNo;
  xmlChar *LedInfo_Type;
  xmlChar *LedInfo_Direction;
  y_intri_device_T_intri_device_hardware_info_HardwareInfo_DeviceLed_LedInfo_LEDDevice LedInfo_LEDDevice;
  y_intri_device_T_intri_device_hardware_info_HardwareInfo_DeviceLed_LedInfo_I2CDevice LedInfo_I2CDevice;
  y_intri_device_T_intri_device_hardware_info_HardwareInfo_DeviceLed_LedInfo_GPIODevice LedInfo_GPIODevice;
} y_intri_device_T_intri_device_hardware_info_HardwareInfo_DeviceLed;

/* container /intri-device/hardware-info/HardwareInfo_DeviceHWMonitor/MonitorInfo_MonitorDevice */
typedef struct y_intri_device_T_intri_device_hardware_info_HardwareInfo_DeviceHWMonitor_MonitorInfo_MonitorDevice_ {
  int32 MCUMonitorDevice_I2cAddr;
  int32 MCUMonitorDevice_AddrRegister;
  xmlChar *MCUMonitorDevice_MonitorAction;
  int32 MCUMonitorDevice_ActiveBit;
} y_intri_device_T_intri_device_hardware_info_HardwareInfo_DeviceHWMonitor_MonitorInfo_MonitorDevice;

/* container /intri-device/hardware-info/HardwareInfo_DeviceHWMonitor/MonitorInfo_I2CDevice */
typedef struct y_intri_device_T_intri_device_hardware_info_HardwareInfo_DeviceHWMonitor_MonitorInfo_I2CDevice_ {
  int32 I2CDevice_I2cAddr;
  int32 I2CDevice_AddrRegister;
  int32 I2CDevice_Action;
  int32 I2CDevice_ActiveBit;
} y_intri_device_T_intri_device_hardware_info_HardwareInfo_DeviceHWMonitor_MonitorInfo_I2CDevice;

/* container /intri-device/hardware-info/HardwareInfo_DeviceHWMonitor/MonitorInfo_GPIODevice */
typedef struct y_intri_device_T_intri_device_hardware_info_HardwareInfo_DeviceHWMonitor_MonitorInfo_GPIODevice_ {
  int32 GPIODevice_Register;
  int32 GPIODevice_Pin;
  boolean GPIODevice_Action;
  boolean GPIODevice_Enable;
} y_intri_device_T_intri_device_hardware_info_HardwareInfo_DeviceHWMonitor_MonitorInfo_GPIODevice;

/* container /intri-device/hardware-info/HardwareInfo_DeviceHWMonitor */
typedef struct y_intri_device_T_intri_device_hardware_info_HardwareInfo_DeviceHWMonitor_ {
  xmlChar *MonitorInfo_Name;
  xmlChar *MonitorInfo_Type;
  xmlChar *MonitorInfo_Direction;
  y_intri_device_T_intri_device_hardware_info_HardwareInfo_DeviceHWMonitor_MonitorInfo_MonitorDevice MonitorInfo_MonitorDevice;
  y_intri_device_T_intri_device_hardware_info_HardwareInfo_DeviceHWMonitor_MonitorInfo_I2CDevice MonitorInfo_I2CDevice;
  y_intri_device_T_intri_device_hardware_info_HardwareInfo_DeviceHWMonitor_MonitorInfo_GPIODevice MonitorInfo_GPIODevice;
} y_intri_device_T_intri_device_hardware_info_HardwareInfo_DeviceHWMonitor;

/* container /intri-device/hardware-info/HardwareInfo_DevicePSU/PSUInfo_PSUDevice */
typedef struct y_intri_device_T_intri_device_hardware_info_HardwareInfo_DevicePSU_PSUInfo_PSUDevice_ {
  int32 MCUPSUDevice_I2cAddr;
  int32 MCUPSUDevice_AddrRegister;
  xmlChar *MCUPSUDevice_PSUAction;
  int32 MCUPSUDevice_ActiveBit;
} y_intri_device_T_intri_device_hardware_info_HardwareInfo_DevicePSU_PSUInfo_PSUDevice;

/* container /intri-device/hardware-info/HardwareInfo_DevicePSU/PSUInfo_I2CDevice */
typedef struct y_intri_device_T_intri_device_hardware_info_HardwareInfo_DevicePSU_PSUInfo_I2CDevice_ {
  int32 I2CDevice_I2cAddr;
  int32 I2CDevice_AddrRegister;
  int32 I2CDevice_Action;
  int32 I2CDevice_ActiveBit;
} y_intri_device_T_intri_device_hardware_info_HardwareInfo_DevicePSU_PSUInfo_I2CDevice;

/* container /intri-device/hardware-info/HardwareInfo_DevicePSU/PSUInfo_GPIODevice */
typedef struct y_intri_device_T_intri_device_hardware_info_HardwareInfo_DevicePSU_PSUInfo_GPIODevice_ {
  int32 GPIODevice_Register;
  int32 GPIODevice_Pin;
  boolean GPIODevice_Action;
  boolean GPIODevice_Enable;
} y_intri_device_T_intri_device_hardware_info_HardwareInfo_DevicePSU_PSUInfo_GPIODevice;

/* container /intri-device/hardware-info/HardwareInfo_DevicePSU */
typedef struct y_intri_device_T_intri_device_hardware_info_HardwareInfo_DevicePSU_ {
  xmlChar *PSUInfo_Name;
  xmlChar *PSUInfo_Type;
  xmlChar *PSUInfo_Direction;
  y_intri_device_T_intri_device_hardware_info_HardwareInfo_DevicePSU_PSUInfo_PSUDevice PSUInfo_PSUDevice;
  y_intri_device_T_intri_device_hardware_info_HardwareInfo_DevicePSU_PSUInfo_I2CDevice PSUInfo_I2CDevice;
  y_intri_device_T_intri_device_hardware_info_HardwareInfo_DevicePSU_PSUInfo_GPIODevice PSUInfo_GPIODevice;
} y_intri_device_T_intri_device_hardware_info_HardwareInfo_DevicePSU;

/* container /intri-device/hardware-info/HardwareInfo_DeviceI2C/I2Cinfo_Device */
typedef struct y_intri_device_T_intri_device_hardware_info_HardwareInfo_DeviceI2C_I2Cinfo_Device_ {
  int32 I2CDevice_I2cAddr;
  int32 I2CDevice_AddrRegister;
  int32 I2CDevice_Action;
  int32 I2CDevice_ActiveBit;
} y_intri_device_T_intri_device_hardware_info_HardwareInfo_DeviceI2C_I2Cinfo_Device;

/* container /intri-device/hardware-info/HardwareInfo_DeviceI2C */
typedef struct y_intri_device_T_intri_device_hardware_info_HardwareInfo_DeviceI2C_ {
  xmlChar *I2Cinfo_Name;
  xmlChar *I2Cinfo_Direction;
  y_intri_device_T_intri_device_hardware_info_HardwareInfo_DeviceI2C_I2Cinfo_Device I2Cinfo_Device;
} y_intri_device_T_intri_device_hardware_info_HardwareInfo_DeviceI2C;

/* container /intri-device/hardware-info/HardwareInfo_DeviceHW/GPIOInfo_Device */
typedef struct y_intri_device_T_intri_device_hardware_info_HardwareInfo_DeviceHW_GPIOInfo_Device_ {
  int32 GPIODevice_Register;
  int32 GPIODevice_Pin;
  boolean GPIODevice_Action;
  boolean GPIODevice_Enable;
} y_intri_device_T_intri_device_hardware_info_HardwareInfo_DeviceHW_GPIOInfo_Device;

/* container /intri-device/hardware-info/HardwareInfo_DeviceHW */
typedef struct y_intri_device_T_intri_device_hardware_info_HardwareInfo_DeviceHW_ {
  xmlChar *GPIOInfo_Name;
  xmlChar *GPIOInfo_Direction;
  y_intri_device_T_intri_device_hardware_info_HardwareInfo_DeviceHW_GPIOInfo_Device GPIOInfo_Device;
} y_intri_device_T_intri_device_hardware_info_HardwareInfo_DeviceHW;

/* container /intri-device/hardware-info/HardwareInfo_DevicePTP/PTPClockSynchronizerInfo_Device */
typedef struct y_intri_device_T_intri_device_hardware_info_HardwareInfo_DevicePTP_PTPClockSynchronizerInfo_Device_ {
  int32 I2CDevice_I2cAddr;
  int32 I2CDevice_AddrRegister;
  int32 I2CDevice_Action;
  int32 I2CDevice_ActiveBit;
} y_intri_device_T_intri_device_hardware_info_HardwareInfo_DevicePTP_PTPClockSynchronizerInfo_Device;

/* container /intri-device/hardware-info/HardwareInfo_DevicePTP */
typedef struct y_intri_device_T_intri_device_hardware_info_HardwareInfo_DevicePTP_ {
  xmlChar *PTPClockSynchronizerInfo_Name;
  xmlChar *PTPClockSynchronizerInfo_Direction;
  y_intri_device_T_intri_device_hardware_info_HardwareInfo_DevicePTP_PTPClockSynchronizerInfo_Device PTPClockSynchronizerInfo_Device;
} y_intri_device_T_intri_device_hardware_info_HardwareInfo_DevicePTP;

/* container /intri-device/hardware-info/HardwareInfo_DeviceGPS */
typedef struct y_intri_device_T_intri_device_hardware_info_HardwareInfo_DeviceGPS_ {
  xmlChar *GPSInfo_Name;
  xmlChar *GPSInfo_Path;
  xmlChar *GPSInfo_Direction;
} y_intri_device_T_intri_device_hardware_info_HardwareInfo_DeviceGPS;

/* container /intri-device/hardware-info/HardwareInfo_DeviceToD */
typedef struct y_intri_device_T_intri_device_hardware_info_HardwareInfo_DeviceToD_ {
  xmlChar *ToDInfo_Name;
  xmlChar *ToDInfo_Path;
  xmlChar *ToDInfo_Direction;
} y_intri_device_T_intri_device_hardware_info_HardwareInfo_DeviceToD;

/* container /intri-device/hardware-info/HardwareInfo_DeviceFan/FanInfo_FANDevice */
typedef struct y_intri_device_T_intri_device_hardware_info_HardwareInfo_DeviceFan_FanInfo_FANDevice_ {
  int32 MCUFanDevice_I2cAddr;
  int32 MCUFanDevice_AddrRegister;
  xmlChar *MCUFanDevice_FANAction;
  int32 MCUFanDevice_ActiveBit;
} y_intri_device_T_intri_device_hardware_info_HardwareInfo_DeviceFan_FanInfo_FANDevice;

/* container /intri-device/hardware-info/HardwareInfo_DeviceFan/FanInfo_I2CDevice */
typedef struct y_intri_device_T_intri_device_hardware_info_HardwareInfo_DeviceFan_FanInfo_I2CDevice_ {
  int32 I2CDevice_I2cAddr;
  int32 I2CDevice_AddrRegister;
  int32 I2CDevice_Action;
  int32 I2CDevice_ActiveBit;
} y_intri_device_T_intri_device_hardware_info_HardwareInfo_DeviceFan_FanInfo_I2CDevice;

/* container /intri-device/hardware-info/HardwareInfo_DeviceFan/FanInfo_GPIODevice */
typedef struct y_intri_device_T_intri_device_hardware_info_HardwareInfo_DeviceFan_FanInfo_GPIODevice_ {
  int32 GPIODevice_Register;
  int32 GPIODevice_Pin;
  boolean GPIODevice_Action;
  boolean GPIODevice_Enable;
} y_intri_device_T_intri_device_hardware_info_HardwareInfo_DeviceFan_FanInfo_GPIODevice;

/* container /intri-device/hardware-info/HardwareInfo_DeviceFan */
typedef struct y_intri_device_T_intri_device_hardware_info_HardwareInfo_DeviceFan_ {
  xmlChar *FanInfo_Name;
  xmlChar *FanInfo_Type;
  int32 FanInfo_FanNumber;
  y_intri_device_T_intri_device_hardware_info_HardwareInfo_DeviceFan_FanInfo_FANDevice FanInfo_FANDevice;
  y_intri_device_T_intri_device_hardware_info_HardwareInfo_DeviceFan_FanInfo_I2CDevice FanInfo_I2CDevice;
  y_intri_device_T_intri_device_hardware_info_HardwareInfo_DeviceFan_FanInfo_GPIODevice FanInfo_GPIODevice;
} y_intri_device_T_intri_device_hardware_info_HardwareInfo_DeviceFan;

/* container /intri-device/hardware-info/HardwareInfo_DevicePoE/PoEInfo_I2CDevice */
typedef struct y_intri_device_T_intri_device_hardware_info_HardwareInfo_DevicePoE_PoEInfo_I2CDevice_ {
  int32 I2CDevice_I2cAddr;
  int32 I2CDevice_AddrRegister;
  int32 I2CDevice_Action;
  int32 I2CDevice_ActiveBit;
} y_intri_device_T_intri_device_hardware_info_HardwareInfo_DevicePoE_PoEInfo_I2CDevice;

/* container /intri-device/hardware-info/HardwareInfo_DevicePoE/PoEInfo_UartDevice */
typedef struct y_intri_device_T_intri_device_hardware_info_HardwareInfo_DevicePoE_PoEInfo_UartDevice_ {
  xmlChar *UARTDevice_Name;
  xmlChar *UARTDevice_Path;
  xmlChar *UARTDevice_Direction;
  int32 UARTDevice_Bandwidth;
} y_intri_device_T_intri_device_hardware_info_HardwareInfo_DevicePoE_PoEInfo_UartDevice;

/* container /intri-device/hardware-info/HardwareInfo_DevicePoE */
typedef struct y_intri_device_T_intri_device_hardware_info_HardwareInfo_DevicePoE_ {
  xmlChar *PoEInfo_Name;
  xmlChar *PoEInfo_Type;
  y_intri_device_T_intri_device_hardware_info_HardwareInfo_DevicePoE_PoEInfo_I2CDevice PoEInfo_I2CDevice;
  y_intri_device_T_intri_device_hardware_info_HardwareInfo_DevicePoE_PoEInfo_UartDevice PoEInfo_UartDevice;
} y_intri_device_T_intri_device_hardware_info_HardwareInfo_DevicePoE;

/* container /intri-device/hardware-info */
typedef struct y_intri_device_T_intri_device_hardware_info_ {
  y_intri_device_T_intri_device_hardware_info_HardwareInfo_DeviceLed HardwareInfo_DeviceLed;
  y_intri_device_T_intri_device_hardware_info_HardwareInfo_DeviceHWMonitor HardwareInfo_DeviceHWMonitor;
  y_intri_device_T_intri_device_hardware_info_HardwareInfo_DevicePSU HardwareInfo_DevicePSU;
  y_intri_device_T_intri_device_hardware_info_HardwareInfo_DeviceI2C HardwareInfo_DeviceI2C;
  y_intri_device_T_intri_device_hardware_info_HardwareInfo_DeviceHW HardwareInfo_DeviceHW;
  y_intri_device_T_intri_device_hardware_info_HardwareInfo_DevicePTP HardwareInfo_DevicePTP;
  y_intri_device_T_intri_device_hardware_info_HardwareInfo_DeviceGPS HardwareInfo_DeviceGPS;
  y_intri_device_T_intri_device_hardware_info_HardwareInfo_DeviceToD HardwareInfo_DeviceToD;
  y_intri_device_T_intri_device_hardware_info_HardwareInfo_DeviceFan HardwareInfo_DeviceFan;
  y_intri_device_T_intri_device_hardware_info_HardwareInfo_DevicePoE HardwareInfo_DevicePoE;
} y_intri_device_T_intri_device_hardware_info;

/* container /intri-device */
typedef struct y_intri_device_T_intri_device_ {
  y_intri_device_T_intri_device_mac_addr mac_addr;
  y_intri_device_T_intri_device_port_list port_list;
  y_intri_device_T_intri_device_lag_port_list lag_port_list;
  y_intri_device_T_intri_device_poe_port_list poe_port_list;
  y_intri_device_T_intri_device_device_info device_info;
  y_intri_device_T_intri_device_board_info board_info;
  y_intri_device_T_intri_device_hardware_info hardware_info;
} y_intri_device_T_intri_device;
/********************************************************************
* FUNCTION y_intri_device_init
* 
* initialize the intri-device server instrumentation library
* 
* INPUTS:
*    modname == requested module name
*    revision == requested version (NULL for any)
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t y_intri_device_init (
  const xmlChar *modname,
  const xmlChar *revision);

/********************************************************************
* FUNCTION y_intri_device_init2
* 
* SIL init phase 2: non-config data structures
* Called after running config is loaded
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t y_intri_device_init2 (void);

/********************************************************************
* FUNCTION y_intri_device_cleanup
*    cleanup the server instrumentation library
* 
********************************************************************/
extern void y_intri_device_cleanup (void);

#ifdef __cplusplus
} /* end extern 'C' */
#endif

#endif